// Each #kernel tells which function to compile; you can have many kernels
#include "UnityCG.cginc"
Texture2D<float4> ResultIn;
RWTexture2D<float4> Result;
Texture2D<float4> NormalAndDepth;
RWTexture2D<float4> RWNormalAndDepth;
Texture2D<float4> PosTex;
Texture2D<float4> _Albedo;
Texture2D<float4> _CameraNormalDepthTex;

int KernelSize;
float4x4 _CameraToWorld;
float4x4 viewprojection;

int screen_width;
int screen_height;
float c_phi;
float n_phi;
float p_phi;
int step_width;

#pragma kernel kernel_copy


[numthreads(16,16,1)]
void kernel_copy (int3 id : SV_DispatchThreadID)
{//Reprojects and moves the color data from the array to textures
    if(id.x >= screen_width || id.y >= screen_height) return;
    int pixel_index = id.y * screen_width + id.x;
    float4 CurPos = mul(viewprojection, float4(PosTex[id.xy].xyz, 1));
    if(PosTex[id.xy].z == 0.0f) {
        CurPos.z = 0.0f;
    }
    RWNormalAndDepth[id.xy] = float4(_CameraNormalDepthTex[id.xy].xyz, CurPos.z);
}

const static float kernel[] = {3.f / 8.f, 1.f / 4.f, 1.f / 16.f};
#pragma kernel Atrous

[numthreads(16,16,1)]
void Atrous (int3 id : SV_DispatchThreadID) {

  if(id.x >= screen_width || id.y >= screen_height) return;
  
  const float3 cval = ResultIn[id.xy].xyz;
  const float3 nval = NormalAndDepth[id.xy].xyz;
  const float3 pval = PosTex[id.xy].xyz;

  float3 sum = float3(0.0f, 0.0f, 0.0f);

  float cum_w = 0.0;
  [unroll]
  for (int dy = -2; dy <= 2; ++dy) {
  [unroll] 
    for (int dx = -2; dx <= 2; ++dx) {
      int u = max(min(id.x + dx * step_width, screen_width - 1), 0);
      int v = max(min(id.y + dy * step_width, screen_height - 1), 0);

      const float3 ctemp = ResultIn[int2(u,v)].xyz;
      float3 t = cval - ctemp;
      float dist2 = dot(t, t);
      const float c_w = min(exp(-dist2 / c_phi), 1.0f);

      t = nval - NormalAndDepth[int2(u,v)].xyz;
      dist2 = max(dot(t, t) / (float)(step_width * step_width), 0.0f);
      const float n_w = min(exp(-dist2 / n_phi), 1.0f);

      t = pval - PosTex[int2(u,v)].xyz;
      dist2 = dot(t, t);
      const float p_w = min(exp(-dist2 / p_phi), 1.0f);

      float weight = c_w * n_w * p_w;

      const int kernel_index = min(abs(dx), abs(dy));
      sum += ctemp * weight * kernel[kernel_index];
      cum_w += weight * kernel[kernel_index];
    }
  }
  if(cum_w == 0.0f) {cum_w = 1.0f;}

  Result[id.xy] = float4(sum / cum_w, 1.0f);

}


#pragma kernel kernel_finalize

[numthreads(16,16,1)]
void kernel_finalize (int3 id : SV_DispatchThreadID)
{
    if (id.x >= screen_width || id.y >= screen_height) return;

    Result[id.xy] = ResultIn[id.xy] * _Albedo[id.xy] * 1.5f;

}
