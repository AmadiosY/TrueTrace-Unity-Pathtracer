#include "UnityCG.cginc"


int screen_width;
int screen_height;

int AtrousIterations;

struct ColData {
    float3 throughput;
    float3 Direct;
    float3 Indirect;
    float3 Fog;
};
StructuredBuffer<ColData> PerPixelRadiance;

float4x4 viewprojection;
float4x4 prevviewprojection;
float4x4 _CameraToWorld;

Texture2D<float4> ColorDirectIn;
Texture2D<float4> ColorIndirectIn;
RWTexture2D<float4> ColorDirectOut;
RWTexture2D<float4> ColorIndirectOut;
RWTexture2D<float4> Result;

Texture2D<float4> _Albedo;

RWTexture2D<float4> RWScreenPosPrev;
Texture2D<float4> ScreenPosPrev;
Texture2D<float4> PosTex;
Texture2D<float4> PrevPosTex;
RWTexture2D<float4> HistoryTex;
Texture2D<float4> _CameraNormalDepthTex;

RWTexture2D<float4> FrameBufferMoment;

RWTexture2D<float4> HistoryDirectTex;
RWTexture2D<float4> HistoryIndirectTex;
RWTexture2D<float4> HistoryMomentTex;

RWTexture2D<float4> RWHistoryNormalAndDepth;
RWTexture2D<float4> RWNormalAndDepth;

Texture2D<float4> HistoryNormalAndDepth;
Texture2D<float4> NormalAndDepth;



inline float2 oct_encode_normal(float3 n) {
    n /= (abs(n.x) + abs(n.y) + abs(n.z));

    if (n.z < 0.0f) {
        // Oct wrap
        n.x = (1.0f - abs(n.y)) * (n.x >= 0.0f ? +1.0f : -1.0f);
        n.y = (1.0f - abs(n.x)) * (n.y >= 0.0f ? +1.0f : -1.0f);
    }

    return float2(0.5f * n.x + 0.5f, 0.5f * n.y + 0.5f);
}


#define THRESHOLD_NORMAL 0.95f;
#define THRESHOLD_DEPTH 2.0f;
#pragma kernel kernel_copy


[numthreads(16,16,1)]
void kernel_copy (int3 id : SV_DispatchThreadID)
{//Reprojects and moves the color data from the array to textures
    if(id.x >= screen_width || id.y >= screen_height) return;
    int pixel_index = id.y * screen_width + id.x;
    float4 PrevPos = mul(prevviewprojection, float4(PosTex[id.xy].xyz, 1));
    float4 CurPos = mul(viewprojection, float4(PosTex[id.xy].xyz, 1));
    ColorDirectOut[id.xy] = float4(PerPixelRadiance[pixel_index].Direct, 1.0f);
    ColorIndirectOut[id.xy] = float4(PerPixelRadiance[pixel_index].Indirect, 1.0f);
    RWScreenPosPrev[id.xy] =  float4(float2(PrevPos.x, PrevPos.y) / PrevPos.w, 0.0f, 1.0f);
    if(PosTex[id.xy].z == 0.0f) {
        CurPos.z = 0.0f;
    }
    RWNormalAndDepth[id.xy] = float4(oct_encode_normal(_CameraNormalDepthTex[id.xy].xyz), CurPos.z, PrevPos.z);
}


inline float luminance(const float r, const float g, const float b) {
    return 0.299f * r + 0.587f * g + 0.114f * b;
}


inline float3 oct_decode_normal(float2 f) {
    f = f * 2.0f - 1.0f;

    float3 n = float3(f.x, f.y, 1.0f - abs(f.x) - abs(f.y));

    float t = saturate(-n.z);
    n.x += n.x >= 0.0 ? -t : t;
    n.y += n.y >= 0.0 ? -t : t;

    return normalize(n);
}

inline bool is_tap_consistent(int x, int y, const float3 normal, float depth) {
    if (y < 0 || y >= screen_height || x < 0 || x >= screen_width)  return false;

    float4 prev_normal_and_depth = HistoryNormalAndDepth[int2(x, y)];
    float3 prev_normal =  oct_decode_normal(prev_normal_and_depth.xy);
    float  prev_depth  = prev_normal_and_depth.z;

    bool consistent_normal = dot(normal, prev_normal)  > THRESHOLD_NORMAL;
    bool consistent_depth  = abs(depth - prev_depth) < THRESHOLD_DEPTH;

    return consistent_normal && consistent_depth;
}



#pragma kernel kernel_reproject

[numthreads(16,16,1)]
void kernel_reproject (int3 id : SV_DispatchThreadID)
{
    if(id.x >= screen_width || id.y >= screen_height) return;


    float4 direct = ColorDirectIn[id.xy];
    float4 indirect = ColorIndirectIn[id.xy];

    float4 moment;
    moment.x = luminance(direct.x,   direct.y,   direct.z);
    moment.y = luminance(indirect.x, indirect.y, indirect.z);
    moment.z = moment.x * moment.x;
    moment.w = moment.y * moment.y;

    float4 normdepth = NormalAndDepth[id.xy];
    float3 normal = oct_decode_normal(normdepth.xy);
    float depth = normdepth.z;
    float depth_prev = HistoryNormalAndDepth[id.xy].w;

    float2 screen_position_prev = ScreenPosPrev[id.xy].xy;

    if (depth == 0.0f) {
        ColorDirectOut[id.xy] = ColorDirectIn[id.xy];
        ColorIndirectOut[id.xy] = ColorIndirectIn[id.xy];
        return;
    };

    float u_prev = 0.5f * screen_position_prev.x + 0.5f;
    float v_prev = 0.5f * screen_position_prev.y + 0.5f;

    float s_prev = u_prev * (float)screen_width;
    float t_prev = v_prev * (float)screen_height;

    int x_prev = (int)(s_prev);
    int y_prev = (int)(t_prev);

    float fractional_s = s_prev - floor(s_prev);
    float fractional_t = t_prev - floor(t_prev);

    float one_minus_fractional_s = 1.0f - fractional_s;
    float one_minus_fractional_t = 1.0f - fractional_t;

    float w0 = one_minus_fractional_s * one_minus_fractional_t;
    float w1 =           fractional_s * one_minus_fractional_t;
    float w2 = one_minus_fractional_s *           fractional_t;
    float w3 = 1.0f - w0 - w1 - w2;

    float weights[4] = { w0, w1, w2, w3 };
    float consistent_weights_sum = 0.0f;


    for (int j = 0; j < 2; j++) {
        for (int i = 0; i < 2; i++) {
            int tap = i + j * 2;

            if (is_tap_consistent(x_prev + i, y_prev + j, normal, depth_prev)) {
                consistent_weights_sum += weights[tap];
            } else {
                weights[tap] = 0.0f;
            }
        }
    }

    float4 prev_direct   = float4(0.0f, 0.0f, 0.0f, 0.0f);
    float4 prev_indirect = float4(0.0f, 0.0f, 0.0f, 0.0f);
    float4 prev_moment   = float4(0.0f, 0.0f, 0.0f, 0.0f);

    // If we already found at least 1 consistent tap
    if (consistent_weights_sum > 0.0f) {
        // Add consistent taps using their bilinear weight
        for (int j = 0; j < 2; j++) {
            for (int i = 0; i < 2; i++) {
                int tap = i + j * 2;

                if (weights[tap] != 0.0f) {
                    int tap_x = x_prev + i;
                    int tap_y = y_prev + j;
                    int2 tap_index = int2(tap_x, tap_y);

                    float4 tap_direct   = HistoryDirectTex  [tap_index];
                    float4 tap_indirect = HistoryIndirectTex[tap_index];
                    float4 tap_moment   = HistoryMomentTex  [tap_index];

                    prev_direct   += weights[tap] * tap_direct;
                    prev_indirect += weights[tap] * tap_indirect;
                    prev_moment   += weights[tap] * tap_moment;
                }
            }
        }
    } else {
        // If we haven't yet found a consistent tap in a 2x2 region, try a 3x3 region
        for (int j = -1; j <= 1; j++) {
            for (int i = -1; i <= 1; i++) {
                int tap_x = x_prev + i;
                int tap_y = y_prev + j;

                if (is_tap_consistent(tap_x, tap_y, normal, depth_prev)) {
                    int2 tap_index = int2(tap_x, tap_y);

                    prev_direct   += HistoryDirectTex  [tap_index];
                    prev_indirect += HistoryIndirectTex[tap_index];
                    prev_moment   += HistoryMomentTex  [tap_index];

                    consistent_weights_sum += 1.0f;
                }
            }
        }
    }

    if (consistent_weights_sum > 0.0f) {
        // Normalize
        //consistent_weights_sum = max(consistent_weights_sum, 0.1f);
        prev_direct   /= consistent_weights_sum;
        prev_indirect /= consistent_weights_sum;
        prev_moment   /= consistent_weights_sum;
        int history = HistoryTex[id.xy].x + 1; // Increase History Length by 1 step
        HistoryTex[id.xy] = float4(HistoryTex[id.xy].x + 1.0f, 0.0f, 0.0f, 1.0f);


        float inv_history = rcp((float)(history));
        float alpha_colour = max(0.2f, inv_history);
        float alpha_moment = max(0.2f, inv_history);

        // Integrate using exponential moving average
        direct   = lerp(prev_direct,   direct,   alpha_colour);
        indirect = lerp(prev_indirect, indirect, alpha_colour);
        moment   = lerp(prev_moment,   moment,   alpha_moment);
        if (history >= 4) {
            float variance_direct   = max(0.0f, moment.z - moment.x * moment.x);
            float variance_indirect = max(0.0f, moment.w - moment.y * moment.y);

            // Store the Variance in the alpha channels
            direct  .w = variance_direct;
            indirect.w = variance_indirect;
        }
    } else {
        HistoryTex[id.xy] = float4(0,0,0,1); // Reset History Length

        direct.w   = 1.0f;
        indirect.w = 1.0f;
    }
    ColorDirectOut[id.xy] = direct;
    ColorIndirectOut[id.xy] = indirect;

    FrameBufferMoment[id.xy] = moment;

}


#pragma kernel kernel_variance


#define epsilon 0.000000001f
static float sigma_z =  4.0f;
static float sigma_n = 16.0f;
static float sigma_l = 10.0f;
static float sigma_l_square = 100.0f;
static float luminance_denom = 0.1f;

inline float2 edge_stopping_weights(
    int delta_x,
    int delta_y,
    const float2 center_depth_gradient,
    float center_depth,
    float depth,
    const float3 center_normal,
    const float3 normal,
    float center_luminance_direct,
    float center_luminance_indirect,
    float luminance_direct,
    float luminance_indirect,
    float luminance_denom_direct,
    float luminance_denom_indirect
) {
    // ∇z(p)·(p−q) (Actually the negative of this but we take its absolute value)
    float d =
        center_depth_gradient.x * (float)delta_x +
        center_depth_gradient.y * (float)delta_y;

    float ln_w_z = abs(center_depth - depth) / (sigma_z * abs(d) + epsilon);

    float w_n = pow(max(0.0f, dot(center_normal, normal)), sigma_n);

    float w_l_direct   = w_n * exp(-abs(center_luminance_direct   - luminance_direct)   * luminance_denom_direct   - ln_w_z);
    float w_l_indirect = w_n * exp(-abs(center_luminance_indirect - luminance_indirect) * luminance_denom_indirect - ln_w_z);

    return float2(w_l_direct, w_l_indirect);
}


[numthreads(16,16,1)]
void kernel_variance (int3 id : SV_DispatchThreadID)
{
    if(id.x >= screen_width || id.y >= screen_height) return;
    int history = HistoryTex[id.xy].x;

    if(history >= 4) {
        ColorDirectOut[id.xy] = ColorDirectIn[id.xy];
        ColorIndirectOut[id.xy] = ColorIndirectIn[id.xy];
        return;
    }

    float4 center_color_direct = ColorDirectIn[id.xy];
    float4 center_color_indirect = ColorIndirectIn[id.xy];
    float4 CenterNormalDepth = NormalAndDepth[id.xy];

    float4 center_luminence_direct = luminance(center_color_direct.x, center_color_direct.y, center_color_direct.z);
    float4 center_luminence_indirect = luminance(center_color_indirect.x, center_color_indirect.y, center_color_indirect.z);

    float3 CenterNormal = oct_decode_normal(CenterNormalDepth.xy);
    float CenterDepth = CenterNormalDepth.z;

    float2 center_depth_gradient = float2(
            NormalAndDepth[int2(id.x + 1, id.y)].z - CenterDepth,
            NormalAndDepth[int2(id.x, id.y + 1)].z - CenterDepth);

    if(CenterDepth == 0.0f) {
        ColorDirectOut[id.xy] = ColorDirectIn[id.xy];
        ColorIndirectOut[id.xy] = ColorIndirectIn[id.xy];
        return;
    }


    float sum_weight_direct   = 1.0f;
    float sum_weight_indirect = 1.0f;

    float4 sum_colour_direct   = center_color_direct;
    float4 sum_colour_indirect = center_color_indirect;

    float4 sum_moment = float4(0.0f, 0.0f, 0.0f, 0.0f);


    int2 tap_index;
    for (int j = -3; j <= 3; j++) {
        int tap_y = id.y + j;

        if (tap_y < 0 || tap_y >= screen_height) continue;

        for (int i = -3; i <= 3; i++) {
            int tap_x = id.x + i;

            if (tap_x < 0 || tap_x >= screen_width) continue;

            if (i == 0 && j == 0) continue; // Center pixel is treated separately

            tap_index = int2(tap_x, tap_y);

            float4 colour_direct   = ColorDirectIn   [tap_index];
            float4 colour_indirect = ColorIndirectIn [tap_index];
            float4 moment          = FrameBufferMoment[tap_index];
            float4 TappedNormalDepth = NormalAndDepth[tap_index];

            float luminance_direct   = luminance(colour_direct.x,   colour_direct.y,   colour_direct.z);
            float luminance_indirect = luminance(colour_indirect.x, colour_indirect.y, colour_indirect.z);

            float2 w = edge_stopping_weights(
                i, j,
                center_depth_gradient,
                CenterDepth, TappedNormalDepth.z,
                CenterNormal, oct_decode_normal(TappedNormalDepth.xy),
                center_luminence_direct, center_luminence_indirect,
                luminance_direct, luminance_indirect,
                luminance_denom, luminance_denom
            );

            float w_direct   = w.x;
            float w_indirect = w.y;

            sum_weight_direct   += w_direct;
            sum_weight_indirect += w_indirect;

            sum_colour_direct   += w_direct   * colour_direct;
            sum_colour_indirect += w_indirect * colour_indirect;

            sum_moment += moment * float4(w_direct, w_indirect, w_direct, w_indirect);
        }
    }


    sum_weight_direct   = max(sum_weight_direct,   0.000000001f);
    sum_weight_indirect = max(sum_weight_indirect, 0.000000001f);

    sum_colour_direct   /= sum_weight_direct;
    sum_colour_indirect /= sum_weight_indirect;

    sum_moment /= float4(sum_weight_direct, sum_weight_indirect, sum_weight_direct, sum_weight_indirect);

    sum_colour_direct  .w = max(0.0f, sum_moment.z - sum_moment.x * sum_moment.x);
    sum_colour_indirect.w = max(0.0f, sum_moment.w - sum_moment.y * sum_moment.y);

    // Store the Variance in the alpha channel
    ColorDirectOut  [id.xy] = sum_colour_direct;
    ColorIndirectOut[id.xy] = sum_colour_indirect;

}


#pragma kernel kernel_atrous

const static int feedback_iteration = 1;
uniform int step_size;

const static float kernel_gaussian[2][2] = {
    { 1.0f / 4.0f, 1.0f / 8.0f  },
    { 1.0f / 8.0f, 1.0f / 16.0f }
};

[numthreads(16,16,1)]
void kernel_atrous (int3 id : SV_DispatchThreadID)
{
    if (id.x >= screen_width || id.y >= screen_height) return;

    float variance_blurred_direct   = 0.0f;
    float variance_blurred_indirect = 0.0f;
    int i, j, tap_x, tap_y;


    for (j = -1; j <= 1; j++) {
        tap_y = clamp(id.y + j, 0, screen_height - 1);
        [unroll]
        for (i = -1; i <= 1; i++) {
            tap_x = clamp(id.x + i, 0, screen_width - 1);
            // Read the Variance of Direct/Indirect Illumination
            // The Variance is stored in the alpha channel (w coordinate)
            float variance_direct   = ColorDirectIn  [int2(tap_x, tap_y)].w;
            float variance_indirect = ColorIndirectIn[int2(tap_x, tap_y)].w;

            float kernel_weight = kernel_gaussian[abs(i)][abs(j)];

            variance_blurred_direct   += variance_direct   * kernel_weight;
            variance_blurred_indirect += variance_indirect * kernel_weight;
        }
    }

// Precompute denominators that are loop invariant
    float luminance_denom_direct   = rsqrt(sigma_l_square * max(0.0f, variance_blurred_direct)   + epsilon);
    float luminance_denom_indirect = rsqrt(sigma_l_square * max(0.0f, variance_blurred_indirect) + epsilon);

    const float4 center_colour_direct   = ColorDirectIn  [id.xy];
    const float4 center_colour_indirect = ColorIndirectIn[id.xy];

    float center_luminance_direct   = luminance(center_colour_direct.x,   center_colour_direct.y,   center_colour_direct.z);
    float center_luminance_indirect = luminance(center_colour_indirect.x, center_colour_indirect.y, center_colour_indirect.z);

    float4 center_normal_and_depth = NormalAndDepth[id.xy];

    float3 center_normal = oct_decode_normal(center_normal_and_depth.xy);
    float  center_depth  = center_normal_and_depth.z;

    // Check if the pixel belongs to the Skybox
    if (center_depth == 0.0f) return;

    float2 center_depth_gradient = float2(
        NormalAndDepth[int2(id.x + 1, id.y)].z - center_depth,
        NormalAndDepth[int2(id.x, id.y + 1)].z - center_depth
    );

    float  sum_weight_direct   = 1.0f;
    float  sum_weight_indirect = 1.0f;
    float4 sum_colour_direct   = center_colour_direct;
    float4 sum_colour_indirect = center_colour_indirect;

    // Use a 3x3 box filter, as recommended in the A-SVGF paper
    const static int radius = 1;
    float4 color_direct;
    float4 color_indirect;
    float4 normal_and_depth;
    for (j = -radius; j <= radius; j++) {
        tap_y = j * step_size + id.y;

        if (tap_y < 0 || tap_y >= screen_height) continue;
        [unroll]
        for (i = -radius; i <= radius; i++) {
            tap_x = i * step_size + id.x;

            if (tap_x < 0 || tap_x >= screen_width || (i == 0 && j == 0)) continue;

            color_direct   = ColorDirectIn  [int2(tap_x, tap_y)];
            color_indirect = ColorIndirectIn[int2(tap_x, tap_y)];

            float luminance_direct   = luminance(color_direct.x,   color_direct.y,   color_direct.z);
            float luminance_indirect = luminance(color_indirect.x, color_indirect.y, color_indirect.z);

            normal_and_depth = NormalAndDepth[int2(tap_x, tap_y)];

            float3 normal = oct_decode_normal(normal_and_depth.xy);
            float depth = normal_and_depth.z;

            float2 w = edge_stopping_weights(
                i * step_size,
                j * step_size,
                center_depth_gradient,
                center_depth, depth,
                center_normal, normal,
                center_luminance_direct, center_luminance_indirect,
                luminance_direct,       luminance_indirect,
                luminance_denom_direct, luminance_denom_indirect
            );

            float weight_direct   = w.x;
            float weight_indirect = w.y;

            sum_weight_direct   += weight_direct;
            sum_weight_indirect += weight_indirect;

            // Filter Colour using the weights, filter Variance using the square of the weights
            sum_colour_direct   += float4(weight_direct,   weight_direct,   weight_direct,   weight_direct   * weight_direct)   * color_direct;
            sum_colour_indirect += float4(weight_indirect, weight_indirect, weight_indirect, weight_indirect * weight_indirect) * color_indirect;
        }
    }

    float inv_sum_weight_direct   = rcp(sum_weight_direct);
    float inv_sum_weight_indirect = rcp(sum_weight_indirect);

    // Normalize
    sum_colour_direct   *= inv_sum_weight_direct;
    sum_colour_indirect *= inv_sum_weight_indirect;

    // Alpha channel contains Variance, and needs to be divided by the square of the weights
    sum_colour_direct  .w *= inv_sum_weight_direct;
    sum_colour_indirect.w *= inv_sum_weight_indirect;

    ColorDirectOut  [id.xy] = sum_colour_direct;
    ColorIndirectOut[id.xy] = sum_colour_indirect;

    if (step_size == (1 << feedback_iteration)) {
        HistoryDirectTex  [id.xy] = sum_colour_direct;
        HistoryIndirectTex[id.xy] = sum_colour_indirect;
    }

}



#pragma kernel kernel_finalize

[numthreads(16,16,1)]
void kernel_finalize (int3 id : SV_DispatchThreadID)
{
    if (id.x >= screen_width || id.y >= screen_height) return;
    int pixel_index = id.y * screen_width + id.x;

    float4 direct   = ColorDirectIn  [id.xy];
    float4 indirect = ColorIndirectIn[id.xy];

    float4 colour = (direct + indirect) * _Albedo[id.xy] + float4(PerPixelRadiance[pixel_index].Fog, 0);
    Result[id.xy] = colour;


    colour = colour / (1.0f + luminance(colour.x, colour.y, colour.z));

    // Convert to gamma space
    colour.x = sqrt(max(0.0f, colour.x));
    colour.y = sqrt(max(0.0f, colour.y));
    colour.z = sqrt(max(0.0f, colour.z));

    ColorDirectOut[id.xy] = colour;

    if (AtrousIterations <= feedback_iteration) {
        // Normally the à-trous filter copies the illumination history,
        // but in case the filter was skipped we need to do this here
        HistoryDirectTex  [id.xy] = direct;
        HistoryIndirectTex[id.xy] = indirect;
    }


    HistoryMomentTex          [id.xy] = FrameBufferMoment[id.xy];
    RWHistoryNormalAndDepth[id.xy] = NormalAndDepth[id.xy];
}





#pragma kernel kernel_taa

RWTexture2D<float4> TAAPrev;

inline float3 rgb_to_ycocg(const float3 colour) {
    return float3(
         0.25f * colour.x + 0.5f * colour.y + 0.25f * colour.z,
         0.5f  * colour.x                   - 0.5f  * colour.z,
        -0.25f * colour.x + 0.5f * colour.y - 0.25f * colour.z
    );
}

inline float3 ycocg_to_rgb(const float3 colour) {
    return float3(
        saturate(colour.x + colour.y - colour.z),
        saturate(colour.x            + colour.z),
        saturate(colour.x - colour.y - colour.z)
    );
}

float mitchell_netravali(float x) {
    const static float B = 1.0f / 3.0f;
    const static float C = 1.0f / 3.0f;

    x = abs(x);
    float x2 = x  * x;
    float x3 = x2 * x;

    if (x < 1.0f) {
        return (1.0f / 6.0f) * ((12.0f - 9.0f * B - 6.0f * C) * x3 + (-18.0f + 12.0f * B + 6.0f  * C) * x2 + (6.0f - 2.0f * B));
    } else if (x < 2.0f) {
        return (1.0f / 6.0f) * (              (-B - 6.0f * C) * x3 +           (6.0f * B + 30.0f * C) * x2 + (-12.0f * B - 48.0f * C) * x + (8.0f * B + 24.0f * C));
    } else {
        return 0.0f;
    }
}

int Samples_Accumulated;
[numthreads(16,16,1)]
void kernel_taa (int3 id : SV_DispatchThreadID)
{
if (id.x >= screen_width || id.y >= screen_height) return;
//in = Result
//out = ColorDirectOut
    float4 colour = Result[id.xy];

    if (Samples_Accumulated == 0) {
        // On the first frame the history buffer will be black,
        // in this case we don't perform temporal accumulation
        ColorDirectOut[id.xy] = Result[id.xy];
        return;
    }

    float2 screen_position_prev = ScreenPosPrev[id.xy].xy;

    // Convert from [-1, 1] to [0, 1]
    float u_prev = 0.5f + 0.5f * screen_position_prev.x;
    float v_prev = 0.5f + 0.5f * screen_position_prev.y;

    float s_prev = u_prev * (float)(screen_width);
    float t_prev = v_prev * (float)(screen_height);

    int x_prev = (int)(s_prev);
    int y_prev = (int)(t_prev);

    float  sum_weight = 0.0f;
    float4 sum = float4(0.0f, 0.0f, 0.0f, 0.0f);

    for (int j = y_prev - 2; j < y_prev + 2; j++) {
        if (j < 0 || j >= screen_height) continue;

        for (int i = x_prev - 2; i < x_prev + 2; i++) {
            if (i < 0 || i >= screen_width) continue;

            float weight =
                mitchell_netravali((float)(i) - s_prev) *
                mitchell_netravali((float)(j) - t_prev);

            sum_weight += weight;
            sum        += weight * TAAPrev[int2(i, j)];
        }
    }

    if (sum_weight > 0.0f) {
        float3 colour_curr = rgb_to_ycocg(float3(colour.xyz));
        float3 colour_prev = rgb_to_ycocg(float3(sum.xyz / sum_weight));

        float3 colour_avg = colour_curr;
        float3 colour_var = colour_curr * colour_curr;

        if (id.x >= 1) {
            if (id.y >= 1) {
                float3 f = rgb_to_ycocg(float3(Result[int2(id.x - 1, id.y - 1)].xyz));

                colour_avg += f;
                colour_var += f * f;
            }

            float3 f = rgb_to_ycocg(float3(Result[int2(id.x - 1, id.y)].xyz));

            colour_avg += f;
            colour_var += f * f;

            if (id.y < screen_height - 1) {
                float3 f = rgb_to_ycocg(float3(Result[int2(id.x - 1, id.y + 1)].xyz));

                colour_avg += f;
                colour_var += f * f;
            }
        }

        if (id.y >= 1) {
            float3 f = rgb_to_ycocg(float3(Result[int2(id.x, id.y - 1)].xyz));

            colour_avg += f;
            colour_var += f * f;
        }

        if (id.y < screen_height - 1) {
            float3 f = rgb_to_ycocg(float3(Result[int2(id.x, id.y + 1)].xyz));

            colour_avg += f;
            colour_var += f * f;
        }

        if (id.x < screen_width - 1) {
            if (id.y >= 1) {
                float3 f = rgb_to_ycocg(float3(Result[int2(id.x + 1, id.y - 1)].xyz));

                colour_avg += f;
                colour_var += f * f;
            }

            float3 f = rgb_to_ycocg(float3(Result[int2(id.x + 1, id.y)].xyz));

            colour_avg += f;
            colour_var += f * f;

            if (id.y < screen_height - 1) {
                float3 f = rgb_to_ycocg(float3(Result[int2(id.x + 1, id.y + 1)].xyz));

                colour_avg += f;
                colour_var += f * f;
            }
        }

        // Normalize the 9 taps
        colour_avg *= 1.0f / 9.0f;
        colour_var *= 1.0f / 9.0f;

        // Compute variance and standard deviation
        float3 sigma2 = colour_var - colour_avg * colour_avg;
        float3 sigma = float3(
            sqrt(max(0.0f, sigma2.x)),
            sqrt(max(0.0f, sigma2.y)),
            sqrt(max(0.0f, sigma2.z))
        );

        // Clamp based on average and standard deviation
        float3 colour_min = colour_avg - 1.25f * sigma;
        float3 colour_max = colour_avg + 1.25f * sigma;

        colour_prev = clamp(colour_prev, colour_min, colour_max);

//      float contrast = length(colour_curr - colour_avg);

        // Integrate temporally
        float ALPHA = 0.1f;
        float3 integrated = ycocg_to_rgb(lerp(colour_prev, colour_curr, ALPHA));

        colour.x = integrated.x;
        colour.y = integrated.y;
        colour.z = integrated.z;
    }

    ColorDirectOut[id.xy] = colour;



}


#pragma kernel kernel_taa_finalize



[numthreads(16,16,1)]
void kernel_taa_finalize (int3 id : SV_DispatchThreadID)
{
    if (id.x >= screen_width || id.y >= screen_height) return;
    
    float4 color = ColorDirectIn[id.xy];

    TAAPrev[id.xy] = color;

    color = color * color;

    color = color / (1.0f - luminance(color.x, color.y, color.z));

    Result[id.xy] = color;


}