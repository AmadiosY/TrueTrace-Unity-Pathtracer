#pragma kernel kernel_upsample
#include "UnityCG.cginc"

int source_width;
int source_height;

int target_width;
int target_height;

Texture2D<float4> Input;
SamplerState sampler_Input_point_clamp;
RWTexture2D<float4> Output;
Texture2D<float4> PrevOutput;


Texture2D<float4> NormalTex;
SamplerState sampler_NormalTex; 
Texture2D<float4> DepthTex;
SamplerState sampler_DepthTex; 
Texture2D<float4> PrevDepthTex;
SamplerState sampler_PrevDepthTex; 
RWTexture2D<float4> PrevDepthTexWrite;
Texture2D<float4> Albedo;
Texture2D<float4> MotionVectors;

Texture2D<float4> PosTex;

float3 CamPos;
float FarPlane;

uint pixel_index;

uint curframe;
uint cursam;





[numthreads(16,16,1)]
void kernel_upsample (int3 id : SV_DispatchThreadID)
{
    if (id.x >= target_width || id.y >= target_height) return;
    
    pixel_index = id.y * target_width + id.x;
    float2 UV = float2(id.xy) / float2(target_width, target_height);
    float2 newUV = UV - MotionVectors[id.xy].xy;
    float2 newUV2 = UV + MotionVectors[id.xy].xy;
    float CurDepth = Linear01Depth(DepthTex.SampleLevel(sampler_DepthTex, UV, 0).x) * FarPlane;
    float ReprojDepth = PrevDepthTex.SampleLevel(sampler_PrevDepthTex, newUV, 0).x;
    float CurDepth2 = Linear01Depth(DepthTex.SampleLevel(sampler_DepthTex, newUV2, 0).x) * FarPlane;
    float ReprojDepth2 = PrevDepthTex.SampleLevel(sampler_PrevDepthTex, UV, 0).x;
    bool Disocluded = abs(CurDepth - ReprojDepth) > 0.1f * CurDepth || abs(CurDepth2 - ReprojDepth2) > 0.1f * CurDepth2 ;
    float3 CurrentColor = Input.SampleLevel(sampler_Input_point_clamp, UV, 0).xyz;
    if(Disocluded || (newUV.x > 1 || newUV.x < 0 || newUV.y > 1 || newUV.y < 0)) Output[id.xy] = float4(CurrentColor,1);
    else Output[id.xy] = float4(lerp(PrevOutput[newUV * float2(target_width, target_height)], CurrentColor, 0.5f),1);
    PrevDepthTexWrite[id.xy] = float4(CurDepth, 0, 0, 1);
}