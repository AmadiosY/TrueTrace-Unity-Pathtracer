// Each #kernel tells which function to compile; you can have many kernels
#include "UnityCG.cginc"
Texture2D<float4> ResultIn;
RWTexture2D<float4> Result;
Texture2D<float4> NormalAndDepth;
RWTexture2D<float4> RWNormalAndDepth;
Texture2D<float4> PosTex;
Texture2D<float4> _Albedo;
Texture2D<float4> _CameraNormalDepthTex;

int KernelSize;
float4x4 _CameraToWorld;
float4x4 viewprojection;

int screen_width;
int screen_height;
float c_phi;
float n_phi;
float p_phi;
int step_width;
Texture2D<float4> NormalTex;

#pragma kernel kernel_copy


[numthreads(16,16,1)]
void kernel_copy (int3 id : SV_DispatchThreadID)
{//Reprojects and moves the color data from the array to textures
    if(id.x >= screen_width || id.y >= screen_height) return;
    int pixel_index = id.y * screen_width + id.x;
    float4 CurPos = mul(viewprojection, float4(PosTex[id.xy].xyz, 1));
    if(PosTex[id.xy].z == 0.0f) {
        CurPos.z = 0.0f;
    }
    RWNormalAndDepth[id.xy] = float4(normalize(NormalTex[id.xy].xyz * 2.0f - 1.0f), 0);
}

const static float kernel[] = {3.f / 8.f, 1.f / 4.f, 1.f / 16.f};
#pragma kernel Atrous

static const float wavelet_factor = 0.5;
static const float wavelet_kernel[2][2] = {
    { 1.0, wavelet_factor  },
    { wavelet_factor, wavelet_factor * wavelet_factor }
};

[numthreads(16,16,1)]
void Atrous (int3 id : SV_DispatchThreadID) {

  if(id.x >= screen_width || id.y >= screen_height) return;
  
  float3 sum_color_hf = ResultIn[id.xy].xyz;
  const float3 normal_center = NormalAndDepth[id.xy].xyz;
  const float depth_center = PosTex[id.xy].w;
  float sum_w_hf = 1.0f;

  int step_size = int(1u << (step_width - 2));
 const int r = 1;
    for(int yy = -r; yy <= r; yy++) {
        for(int xx = -r; xx <= r; xx++) {
            int2 p = id.xy + int2(xx, yy) * step_size;

            if(xx == 0 && yy == 0)
                continue;

            float w = float(all((p >= 0)) && all((p < int2(screen_width, screen_height))));

            float3 normal = NormalAndDepth[p].xyz;

            float depth = PosTex[p].w;

            float dist_z = abs(depth_center - depth);
            w *= exp(-dist_z / float(step_size) / (p_phi * 2.0f));
            w *= wavelet_kernel[abs(xx)][abs(yy)];

            float w_hf = w;

            float3 c_hf = ResultIn[p].xyz;

            float NdotN = max(0.0, dot(normal_center, normal));

                w_hf *= exp(-NdotN / (step_size * step_width) / (n_phi * 2.0f));


            sum_color_hf += c_hf.rgb * w_hf;
            sum_w_hf     += w_hf;
        }
    }

  Result[id.xy] = float4(sum_color_hf / sum_w_hf, 1.0f);

}


#pragma kernel kernel_finalize

[numthreads(16,16,1)]
void kernel_finalize (int3 id : SV_DispatchThreadID)
{
    if (id.x >= screen_width || id.y >= screen_height) return;
    float3 Albedo = _Albedo[id.xy].xyz;

    Result[id.xy] = float4(ResultIn[id.xy].xyz * Albedo, 1);

}
