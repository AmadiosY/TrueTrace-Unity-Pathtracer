// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> Input;
RWTexture2D<float4> Result;

int width;

static float gamma = 2.2;
float3 lumaBasedReinhardToneMapping(float3 color)
{
    color = pow(color, gamma);
    float luma = dot(color, float3(0.2126, 0.7152, 0.0722));
    float toneMappedLuma = luma / (1. + luma);
    color *= toneMappedLuma / luma;
    color = pow(color, 1. / gamma);
    return color;
}
float3 RomBinDaHouseToneMapping(float3 color)
{
    //color = pow(color, gamma);
    color = exp( -1.0 / ( 2.72*color + 0.15 ) );
    //color = pow(color, 1. / gamma);
    return color;
}
float3 simpleReinhardToneMapping(float3 color)
{
    float exposure = 1.0;
    color *= exposure/(1. + color / exposure);
    //color = pow(color, 1. / gamma);
    return color;
}

float3 Uncharted2ToneMapping(float3 color)
{
    float A = 0.15;
    float B = 0.50;
    float C = 0.10;
    float D = 0.20;
    float E = 0.02;
    float F = 0.30;
    float W = 11.2;
    float exposure = 2.;
    color *= exposure;
    color = ((color * (A * color + C * B) + D * E) / (color * (A * color + B) + D * F)) - E / F;
    float white = ((W * (A * W + C * B) + D * E) / (W * (A * W + B) + D * F)) - E / F;
    color /= white;
    //color = pow(color, float3(1. / gamma));
    return color;
}

float3 filmicToneMapping(float3 color)
{
    color = max(0., color - 0.004);
    color = (color * (6.2 * color + .5)) / (color * (6.2 * color + 1.7) + 0.06);
    color = pow(color, gamma);
    return color;
}


float3 ACESFilmicTonemap(float3 x) {
    float a = 2.51;
    float b = 0.03;
    float c = 2.43;
    float d = 0.59;
    float e = 0.14;
    return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0);
}

float3 TonemapUchimura ( float3 v ) {
    const float P = 1.0f;  // max display brightness
    const float a = 1.0f;  // contrast
    const float m = 0.22f; // linear section start
    const float l = 0.4f;  // linear section length
    const float c = 1.33f; // black
    const float b = 0.0f;  // pedestal

    float l0 = ( ( P - m ) * l ) / a;
    float L0 = m - m / a;
    float L1 = m + ( 1.0f - m ) / a;
    float S0 = m + l0;
    float S1 = m + a * l0;
    float C2 = ( a * P ) / ( P - S1 );
    float CP = -C2 / P;

    float3 w0 = 1.0f - smoothstep( 0.0f, m, v );
    float3 w2 = step( m + l0, v );
    float3 w1 = 1.0f - w0 - w2;

    float3 T = m * pow(abs(v / m), c ) + b;
    float3 S = P - ( P - S1 ) * exp( CP * ( v - S0 ) );
    float3 L = m + a * ( v - m );

    return T * w0 + L * w1 + S * w2;
}

[numthreads(16,16,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!
    float3 result = TonemapUchimura(Result[id.xy].xyz);
    Result[id.xy] = float4(result, 1.0);
}
