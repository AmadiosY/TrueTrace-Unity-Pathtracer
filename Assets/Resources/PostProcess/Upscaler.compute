#pragma kernel kernel_upsample
#include "UnityCG.cginc"

int source_width;
int source_height;

int target_width;
int target_height;

Texture2D<float4> Input;
SamplerState sampler_Input_point_clamp;
RWTexture2D<float4> Output;
RWTexture2D<float4> FinalOutput;
Texture2D<float4> PrevOutput;

float4x4 ViewProjectionMatrix;

Texture2D<float4> NormalTex;
SamplerState sampler_NormalTex; 
Texture2D<float4> DepthTex;
SamplerState sampler_DepthTex; 
Texture2D<float4> PrevDepthTex;
SamplerState sampler_PrevDepthTex; 
RWTexture2D<float4> PrevDepthTexWrite;
Texture2D<float4> Albedo;
Texture2D<float4> MotionVectors;
SamplerState sampler_MotionVectors;

Texture2D<float4> PosTex;

float3 CamPos;
float FarPlane;

uint pixel_index;

uint curframe;
uint cursam;


// texture coords for directional sampling
float2 center_pixel;
float2 north_pixel;
float2 south_pixel;
float2 east_pixel;
float2 west_pixel;
float2 north_east_pixel;
float2 north_west_pixel;
float2 south_east_pixel;
float2 south_west_pixel;

// offset coordinates used for super sampling
const float2 offset_uv = float2(0.36, 0.64);

// finds the absolute distance from two floats
float float_diff(float float_a, float float_b) {
    return abs(float_a - float_b);
}

// maximum difference for all 3 color channels
float color_diff(float4 color_a, float4 color_b) {
    float diff_r = float_diff(color_a.r, color_b.r);
    float diff_g = float_diff(color_a.g, color_b.g);
    float diff_b = float_diff(color_a.b, color_b.b);
    return max(diff_r, max(diff_g, diff_b));
}

// simple average of two colors
float4 color_average(float4 color_a, float4 color_b) {
    return lerp(color_a, color_b, 0.5);
}

// take 9 samples and perform a directional average
float4 directional_average() {
    // get the colors of all 9 pixels in the 3x3 grid
    float4 pixel_0 = Input.SampleLevel(sampler_Input_point_clamp, center_pixel, 0.0); // center pixel
    float4 pixel_1 = Input.SampleLevel(sampler_Input_point_clamp, north_pixel, 0.0); // north pixel
    float4 pixel_2 = Input.SampleLevel(sampler_Input_point_clamp, south_pixel, 0.0); // south pixel
    float4 pixel_3 = Input.SampleLevel(sampler_Input_point_clamp, east_pixel, 0.0); // east pixel
    float4 pixel_4 = Input.SampleLevel(sampler_Input_point_clamp, west_pixel, 0.0); // west pixel
    float4 pixel_5 = Input.SampleLevel(sampler_Input_point_clamp, north_east_pixel, 0.0); // north-east pixel
    float4 pixel_6 = Input.SampleLevel(sampler_Input_point_clamp, north_west_pixel, 0.0); // north-west pixel
    float4 pixel_7 = Input.SampleLevel(sampler_Input_point_clamp, south_east_pixel, 0.0); // south-east pixel
    float4 pixel_8 = Input.SampleLevel(sampler_Input_point_clamp, south_west_pixel, 0.0); // south-west pixel
    
    // find the maximum color difference for each of 12 directions
    float dir_1 = color_diff(pixel_0, pixel_1); // center to north
    float dir_2 = color_diff(pixel_0, pixel_2); // center to south
    float dir_3 = color_diff(pixel_0, pixel_3); // center to east
    float dir_4 = color_diff(pixel_0, pixel_4); // center to west
    float dir_5 = color_diff(pixel_0, pixel_5); // center to north-east
    float dir_6 = color_diff(pixel_0, pixel_6); // center to north-west
    float dir_7 = color_diff(pixel_0, pixel_7); // center to south-east
    float dir_8 = color_diff(pixel_0, pixel_8); // center to south-west
    float dir_9 = color_diff(pixel_1, pixel_4); // north to west
    float dir_10 = color_diff(pixel_1, pixel_3); // north to east
    float dir_11 = color_diff(pixel_2, pixel_3); // south to east
    float dir_12 = color_diff(pixel_2, pixel_4); // south to west
    
    // find the minimum distance of each of the 12 directions
    float min_dist = dir_1;
    min_dist = min(min_dist, dir_2);
    min_dist = min(min_dist, dir_3);
    min_dist = min(min_dist, dir_4);
    min_dist = min(min_dist, dir_5);
    min_dist = min(min_dist, dir_6);
    min_dist = min(min_dist, dir_7);
    min_dist = min(min_dist, dir_8);
    min_dist = min(min_dist, dir_9);
    min_dist = min(min_dist, dir_10);
    min_dist = min(min_dist, dir_11);
    min_dist = min(min_dist, dir_12);
    
    // get the average color along the minimum direction
    float4 result = pixel_0;
    if (min_dist == dir_1)
        result = color_average(pixel_0, pixel_1); // center to north
    else if (min_dist == dir_2) 
        result = color_average(pixel_0, pixel_2); // center to south
    else if (min_dist == dir_3) 
        result = color_average(pixel_0, pixel_3); // center to east
    else if (min_dist == dir_4) 
        result = color_average(pixel_0, pixel_4); // center to west
    else if (min_dist == dir_5) 
        result = color_average(pixel_0, pixel_5); // center to north-east
    else if (min_dist == dir_6) 
        result = color_average(pixel_0, pixel_6); // center to north-west
    else if (min_dist == dir_7) 
        result = color_average(pixel_0, pixel_7); // center to south-east
    else if (min_dist == dir_8) 
        result = color_average(pixel_0, pixel_8); // center to south-west
    else if (min_dist == dir_9) 
        result = color_average(pixel_0, color_average(pixel_1, pixel_4)); // north to west
    else if (min_dist == dir_10) 
        result = color_average(pixel_0, color_average(pixel_1, pixel_3)); // north to east
    else if (min_dist == dir_11) 
        result = color_average(pixel_0, color_average(pixel_2, pixel_3)); // south to east
    else if (min_dist == dir_12) 
        result = color_average(pixel_0, color_average(pixel_2, pixel_4)); // south to west
    return result;
}

// partial derivative on x-axis
float2 deriv_x(float2 pos, float4 frag, float2 pixel) {
    float2 offset = float2(pixel.x, 0.0);
    float2 pos_plus = pos + offset;
    float2 pos_minus = pos - offset;
    int coord = int(frag.x) / 2;
    bool even = int(coord * 2) == int(frag.x);
    return even ? (pos_plus - pos) : (pos - pos_minus);
}

// partial derivative on y-axis
float2 deriv_y(float2 pos, float4 frag, float2 pixel) {
    float2 offset = float2(0.0, pixel.y);
    float2 pos_plus = pos + offset;
    float2 pos_minus = pos - offset;
    int coord = int(frag.y) / 2;
    bool even = int(coord * 2) == int(frag.y);
    return even ? (pos_plus - pos) : (pos - pos_minus);
}

// take 4 samples in a rotated grid for super sampling
float4 super_sample(float2 base_uv, float4 frag, float2 pixel) {
    float2 dx = deriv_x(base_uv, frag, pixel);
    float2 dy = deriv_y(base_uv, frag, pixel);
    float2 uv = 0.0;
    float4 color = 0.0;
    uv = base_uv + offset_uv.x * dx + offset_uv.y * dy;
    color += Input.SampleLevel(sampler_Input_point_clamp, uv, 0.0);
    uv = base_uv - offset_uv.x * dx - offset_uv.y * dy;
    color += Input.SampleLevel(sampler_Input_point_clamp, uv, 0.0);
    uv = base_uv + offset_uv.y * dx - offset_uv.x * dy;
    color += Input.SampleLevel(sampler_Input_point_clamp, uv, 0.0);
    uv = base_uv - offset_uv.y * dx + offset_uv.x * dy;
    color += Input.SampleLevel(sampler_Input_point_clamp, uv, 0.0);
    color *= 0.25;
    return color;
}

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float4x4 _PrevCameraToWorld;
float4x4 _PrevCameraInverseProjection;

float3 CreateCameraRay(float2 uv, float Distance) {
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);   

    return origin + direction * Distance;
}

float3 CreatePreviousCameraRay(float2 uv, float Distance) {
    // Transform the camera origin to world space
    float3 origin = mul(_PrevCameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_PrevCameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_PrevCameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);   

    return origin + direction * Distance;
}



[numthreads(16,16,1)]
void kernel_upsample (int3 id : SV_DispatchThreadID)
{
    if (id.x >= target_width || id.y >= target_height) return;
    
    pixel_index = id.y * target_width + id.x;
    float2 UV = float2(id.xy) / float2(target_width, target_height);
    float2 texel = 0.5f / float2(target_width, target_height);
    float2 newUV = UV - MotionVectors.SampleLevel(sampler_MotionVectors, UV, 0).xy + texel;
    float CurDepth = Linear01Depth(DepthTex.SampleLevel(sampler_DepthTex, UV, 0).x) * FarPlane;
    float ReprojDepth = PrevDepthTex.SampleLevel(sampler_PrevDepthTex, newUV, 0).x;
    float3 CurrentWorldPosition = CreateCameraRay(UV, CurDepth);
    float3 PreviousWorldPosition = CreatePreviousCameraRay(newUV, ReprojDepth);
    bool Disocluded = length(CurrentWorldPosition - PreviousWorldPosition) / CurDepth > 0.1;
    float3 CurrentColor = Input.SampleLevel(sampler_Input_point_clamp, UV, 0).xyz;
    // if(Disocluded || (newUV.x > 1 || newUV.x < 0 || newUV.y > 1 || newUV.y < 0)) Output[id.xy] = float4(CurrentColor * Albedo.SampleLevel(sampler_Input_point_clamp, UV, 0).xyz,1);
    // else Output[id.xy] = float4(lerp(PrevOutput[newUV * float2(target_width, target_height)].xyz, CurrentColor * Albedo.SampleLevel(sampler_Input_point_clamp, UV, 0).xyz, 0.5f),1);

        float2 view_pixel_size = 1.0 / float2(source_width, source_height);
        
        float2 north = float2(0.0, view_pixel_size.y);
        float2 south = float2(0.0, -view_pixel_size.y);
        float2 east = float2(view_pixel_size.x, 0.0);
        float2 west = float2(-view_pixel_size.x, 0.0);
        
        center_pixel = UV;
        north_pixel = center_pixel + north;
        south_pixel = center_pixel + south;
        east_pixel = center_pixel + east;
        west_pixel = center_pixel + west;
        north_east_pixel = center_pixel + north + east;
        north_west_pixel = center_pixel + north + west;
        south_east_pixel = center_pixel + south + east;
        south_west_pixel = center_pixel + south + west;
        float4 dir_avg = directional_average();
        float4 super = super_sample(UV, id.xyxy / float2(target_width, target_height).xyxy, view_pixel_size);
// Disocluded = Disocluded || abs(dot(lerp(dir_avg.xyz, super.xyz, 0.5f), float3(0.299f, 0.587f, 0.114f)) - dot(PrevOutput[newUV * float2(target_width, target_height)].xyz, float3(0.299f, 0.587f, 0.114f))) > 0.1f;
        if(Disocluded || (newUV.x > 1 || newUV.x < 0 || newUV.y > 1 || newUV.y < 0)) Output[id.xy] = float4(lerp(dir_avg.xyz, super.xyz, 0.5f),1);
        else Output[id.xy] = float4(lerp(PrevOutput[newUV * float2(target_width, target_height)].xyz, lerp(dir_avg.xyz, super.xyz, 0.5f), max(1.0f / PrevOutput[newUV * float2(target_width, target_height)].w,0.01f)),PrevOutput[newUV * float2(target_width, target_height)].w + 1);
    FinalOutput[id.xy] = float4(Output[id.xy].xyz * Albedo[id.xy].xyz, 1);
    PrevDepthTexWrite[id.xy] = float4(CurDepth, 0, 0, 1);
}