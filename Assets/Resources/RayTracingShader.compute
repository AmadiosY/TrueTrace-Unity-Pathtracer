//#define UseSkyBox//Comment out to have no skybox and use precomputed atmosphere

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
int frames_accumulated;
uniform int CurBounce;
uniform int MaxBounce;

uint screen_width;
uint screen_height;

int pixel_index;

int lighttricount;

int unitylightcount;

bool UseRussianRoulette;
bool UseNEE;


struct BufferSizeData {   
    int tracerays;
    int rays_retired;
    int shade_rays;
    int shadow_rays;
    int shadow_rays_retired;
};


struct RayData {//128 bit aligned
    float3 origin;
    float3 direction;

    uint4 hits;
    uint PixelIndex;//need to bump this back down to uint1
    float last_pdf;//need to shave off 4 bits
};

struct ShadowRayData {
    float3 origin;
    float3 direction;
    float3 illumination;
    uint PixelIndex;
    float t;
};

struct LightTriangleData {
    float3 pos0;
    float3 posedge1;
    float3 posedge2;
    float3 Norm;

    float3 radiance;
    float sumEnergy;
    float energy;
    float area;
};

StructuredBuffer<LightTriangleData> LightTriangles;

struct CudaTriangle {
    float3 pos0;
    float3 posedge1;
    float3 posedge2;

    float3 norm0;
    float3 normedge1;
    float3 normedge2;

    float2 tex0;
    float2 texedge1;
    float2 texedge2;

    uint MatDat;
};

struct Ray {
    float3 origin;
    float3 direction;
    float3 direction_inv;
};

struct RayHit {
    float t;
    float u, v;
    int mesh_id;
    int triangle_id;
};

struct ColData {
    float3 throughput;
    float3 Direct;
    float3 Indirect;
};

RWTexture2D<float4> Result;

RWStructuredBuffer<ShadowRayData> ShadowRaysBuffer;
RWStructuredBuffer<RayData> GlobalRays1;
RWStructuredBuffer<RayData> GlobalRays2;
RWStructuredBuffer<ColData> GlobalColors;
RWStructuredBuffer<BufferSizeData> BufferSizes;

StructuredBuffer<CudaTriangle> AggTris;

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

RayHit CreateRayHit() {
    RayHit hit;
    hit.t = 100000000;
    hit.u = 0;
    hit.v = 0;
    hit.mesh_id = 0;
    hit.triangle_id = 0;
    return hit;
}

void set(int index, const RayHit ray_hit) {
    uint uv = (int)(ray_hit.u * 65535.0f) | ((int)(ray_hit.v * 65535.0f) << 16);

    GlobalRays1[index].hits = uint4(ray_hit.mesh_id, ray_hit.triangle_id, asuint(ray_hit.t), uv);
}

RayHit get(int index) {
    uint4 hit = GlobalRays1[index].hits;

    RayHit ray_hit;

    ray_hit.mesh_id = hit.x;
    ray_hit.triangle_id = hit.y;

    ray_hit.t = asfloat(hit.z);

    ray_hit.u = (float)(hit.w & 0xffff) / 65535.0f;
    ray_hit.v = (float)(hit.w >> 16) / 65535.0f;

    return ray_hit;
}

inline void set2(int index, const RayHit ray_hit) {
    uint uv = (int)(ray_hit.u * 65535.0f) | ((int)(ray_hit.v * 65535.0f) << 16);

    GlobalRays2[index].hits = uint4(ray_hit.mesh_id, ray_hit.triangle_id, asuint(ray_hit.t), uv);
}

inline RayHit get2(int index) {
    uint4 hit = GlobalRays2[index].hits;

    RayHit ray_hit;

    ray_hit.mesh_id = hit.x;
    ray_hit.triangle_id = hit.y;

    ray_hit.t = asfloat(hit.z);

    ray_hit.u = (float)(hit.w & 0xffff) / 65535.0f;
    ray_hit.v = (float)(hit.w >> 16) / 65535.0f;

    return ray_hit;
}


uint hash_with(uint seed, uint hash) {
    // Wang hash
    seed = (seed ^ 61) ^ hash;
    seed += seed << 3;
    seed ^= seed >> 4;
    seed *= 0x27d4eb2d;
    return seed;
}
uint pcg_hash(uint seed) {
    uint state = seed * 747796405u + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}
float2 random(uint samdim) {
    uint hash = pcg_hash((pixel_index * (uint)6 + samdim) * MaxBounce + CurBounce);

    const static float one_over_max_unsigned = asfloat(0x2f7fffff);

    float x = hash_with(frames_accumulated, hash) * one_over_max_unsigned;
    float y = hash_with(frames_accumulated + 0xdeadbeef, hash) * one_over_max_unsigned;

    return float2(x,y);
}


#pragma kernel Generate 


Ray CreateCameraRay(float2 uv) {
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return CreateRay(origin, direction);
}


[numthreads(256,1,1)]
void Generate (uint3 id : SV_DispatchThreadID) {
    
    if(id.x >= screen_width || id.y >= screen_height) return;
    pixel_index = id.y * screen_width + id.x;
    float2 uv = float2((id.xy) / float2(screen_width, screen_height) * 2.0f - 1.0f);
    Ray ray = CreateCameraRay(uv);

    const static RayHit tempray = CreateRayHit();

    set(pixel_index, tempray);
    GlobalRays1[pixel_index].origin = ray.origin;
    GlobalRays1[pixel_index].direction = ray.direction;
    GlobalRays1[pixel_index].PixelIndex = id.x + id.y * screen_width;
    GlobalRays1[pixel_index].last_pdf = 0.0f;
    GlobalColors[pixel_index].throughput = float3(1.0f, 1.0f, 1.0f);
    GlobalColors[pixel_index].Direct = float3(0.0f, 0.0f, 0.0f);
    GlobalColors[pixel_index].Indirect = float3(0.0f, 0.0f, 0.0f);
}


#pragma kernel kernel_trace 

    static const float PI = 3.14159265f;
    static const float ONE_OVER_PI = 1.0f/3.14159265f;
    static const float EPSILON = 1e-8;

    struct MyMeshDataCompacted {
        float4x4 Transform;
        float4x4 Inverse;
        float3 Center;
        int TriOffset;
        int NodeOffset;
        int MaterialOffset;
        int mesh_data_bvh_offsets;//could I convert this an int4?
    };

    struct BVHNode8Data {
        float3 node_0xyz;
        uint node_0w;
        uint4 node_1;
        uint4 node_2;
        uint4 node_3;
        uint4 node_4;
    };

    StructuredBuffer<BVHNode8Data> cwbvh_nodes;
    StructuredBuffer<MyMeshDataCompacted> _MeshData;


    struct TrianglePos {
        float3 pos0;
        float3 posedge1;
        float3 posedge2;
    };

    inline TrianglePos triangle_get_positions(int ID) {
        TrianglePos tri;
        tri.pos0 = AggTris[ID].pos0;
        tri.posedge1 = AggTris[ID].posedge1;
        tri.posedge2 = AggTris[ID].posedge2;
        return tri;
    }

    inline void IntersectTriangle(int mesh_id, int tri_id, const Ray ray, inout RayHit ray_hit) {

        TrianglePos tri = triangle_get_positions(tri_id);

        float3 h = cross(ray.direction, tri.posedge2);
        float  a = dot(tri.posedge1, h);

        float  f = rcp(a);
        float3 s = ray.origin - tri.pos0;
        float  u = f * dot(s, h);

        if (u >= 0.0f && u <= 1.0f) {
            float3 q = cross(s, tri.posedge1);
            float  v = f * dot(ray.direction, q);

            if (v >= 0.0f && u + v <= 1.0f) {
                float t = f * dot(tri.posedge2, q);

                if (t > 0.0f && t < ray_hit.t) {
                    ray_hit.t = t;
                    ray_hit.u = u;
                    ray_hit.v = v;
                    ray_hit.mesh_id     = mesh_id;
                    ray_hit.triangle_id = tri_id;
                }
            }
        }
    }

    inline uint cwbvh_node_intersect(const Ray ray, int oct_inv4, float max_distance, float3 node_0, uint node_0w, uint4 node_1, uint4 node_2, uint4 node_3, uint4 node_4) {

        uint e_x = (node_0w >> (0 * 8)) & 0xff;
        uint e_y = (node_0w >> (1 * 8)) & 0xff;
        uint e_z = (node_0w >> (2 * 8)) & 0xff;

        float3 adjusted_ray_direction_inv = float3(
            asfloat(e_x << 23) * ray.direction_inv.x,
            asfloat(e_y << 23) * ray.direction_inv.y,
            asfloat(e_z << 23) * ray.direction_inv.z
            );
        float3 adjusted_ray_origin = ray.direction_inv * (node_0 - ray.origin);
                
        uint hit_mask = 0;
        [unroll]
        for(int i = 0; i < 2; i++) {
            uint meta4 = asuint(i == 0 ? node_1.z : node_1.w);

            uint is_inner4   = (meta4 & (meta4 << 1)) & 0x10101010;
            uint inner_mask4 = (((is_inner4 << 3) >> 7) & 0x01010101) * 0xff;
            uint bit_index4  = (meta4 ^ (oct_inv4 & inner_mask4)) & 0x1f1f1f1f;
            uint child_bits4 = (meta4 >> 5) & 0x07070707;

            uint q_lo_x = asuint(i == 0 ? node_2.x : node_2.y);
            uint q_hi_x = asuint(i == 0 ? node_2.z : node_2.w);

            uint q_lo_y = asuint(i == 0 ? node_3.x : node_3.y);
            uint q_hi_y = asuint(i == 0 ? node_3.z : node_3.w);

            uint q_lo_z = asuint(i == 0 ? node_4.x : node_4.y);
            uint q_hi_z = asuint(i == 0 ? node_4.z : node_4.w);

            uint x_min = ray.direction.x < 0.0f ? q_hi_x : q_lo_x;
            uint x_max = ray.direction.x < 0.0f ? q_lo_x : q_hi_x;

            uint y_min = ray.direction.y < 0.0f ? q_hi_y : q_lo_y;
            uint y_max = ray.direction.y < 0.0f ? q_lo_y : q_hi_y;

            uint z_min = ray.direction.z < 0.0f ? q_hi_z : q_lo_z;
            uint z_max = ray.direction.z < 0.0f ? q_lo_z : q_hi_z;
            [unroll]
            for(int j = 0; j < 4; j++) {

                float3 tmin3 = float3((float)((x_min >> (j * 8)) & 0xff), (float)((y_min >> (j * 8)) & 0xff), (float)((z_min >> (j * 8)) & 0xff));
                float3 tmax3 = float3((float)((x_max >> (j * 8)) & 0xff), (float)((y_max >> (j * 8)) & 0xff), (float)((z_max >> (j * 8)) & 0xff));

                tmin3 = tmin3 * adjusted_ray_direction_inv + adjusted_ray_origin;
                tmax3 = tmax3 * adjusted_ray_direction_inv + adjusted_ray_origin;

                float tmin = max(max(tmin3.x, tmin3.y), max(tmin3.z, EPSILON));
                float tmax = min(min(tmax3.x, tmax3.y), min(tmax3.z, max_distance));
                
                bool intersected = tmin < tmax;
                [branch]
                if (intersected) {
                    uint child_bits = (child_bits4 >> (j * 8)) & 0xff;
                    uint bit_index  = (bit_index4 >> (j * 8)) & 0xff;

                    hit_mask |= child_bits << bit_index;
                }
            }
        }
        return hit_mask;
    }

inline uint ray_get_octant_inv4(const float3 ray_direction) {
    return
        (ray_direction.x < 0.0f ? 0 : 0x04040404) |
        (ray_direction.y < 0.0f ? 0 : 0x02020202) |
        (ray_direction.z < 0.0f ? 0 : 0x01010101);
}


void IntersectBVH() {
    RayHit bestHit;
    Ray ray;

    uint2 stack[24];
    int stack_size = 0;
    uint ray_index;
    uint2 current_group;

    uint oct_inv4;
    int tlas_stack_size;
    int mesh_id = -1;
    int NodeOffset = 0;
    int TriOffset = 0;
    Ray ray2;

    while(true) {
        bool inactive = stack_size == 0 && current_group.y == 0;

        if (inactive) {//Revive dead threads(persistent threads, need Shader Model 6 to take true advantage of)
            InterlockedAdd(BufferSizes[CurBounce].rays_retired, 1, ray_index);
            if(ray_index >= (uint)BufferSizes[CurBounce].tracerays) return;
            ray.origin = GlobalRays1[ray_index].origin;
            ray.direction = GlobalRays1[ray_index].direction;
            ray.direction_inv = rcp(ray.direction);
            ray2 = ray;
           
            oct_inv4 = ray_get_octant_inv4(ray.direction);

            current_group.x = (uint)0;
            current_group.y = (uint)0x80000000;
            bestHit = CreateRayHit();

            tlas_stack_size = -1;
        }

        while(true) {//Traverse Accelleration Structure(Compressed Wide Bounding Volume Hierarchy)            
            uint2 triangle_group;
            if(current_group.y & 0xff000000) {
                uint hits_imask = current_group.y;
                uint child_index_offset = firstbithigh(hits_imask);
                uint child_index_base = current_group.x;

                current_group.y &= ~(1 << child_index_offset);

                if(current_group.y & 0xff000000) {
                    stack[stack_size++] = current_group;
                }
                uint slot_index = (child_index_offset - 24) ^ (oct_inv4 & 0xff);
                uint relative_index = countbits(hits_imask & ~(0xffffffff << slot_index));
                uint child_node_index = child_index_base + relative_index;

                float3 node_0 = cwbvh_nodes[child_node_index].node_0xyz;
                uint node_0w = cwbvh_nodes[child_node_index].node_0w;
                
                uint4 node_1 = cwbvh_nodes[child_node_index].node_1;
                uint4 node_2 = cwbvh_nodes[child_node_index].node_2;
                uint4 node_3 = cwbvh_nodes[child_node_index].node_3;
                uint4 node_4 = cwbvh_nodes[child_node_index].node_4;

                uint hitmask = cwbvh_node_intersect(ray, oct_inv4, bestHit.t, node_0, node_0w, node_1, node_2, node_3, node_4);

                uint imask = (node_0w >> (3 * 8)) & 0xff;

                current_group.x = asuint(node_1.x) + ((tlas_stack_size == -1) ? 0 : NodeOffset);
                triangle_group.x = asuint(node_1.y) + ((tlas_stack_size == -1) ? 0 : TriOffset);

                current_group .y = (hitmask & 0xff000000) | (imask);
                triangle_group.y = (hitmask & 0x00ffffff);
            }
            else {
                triangle_group.x = current_group.x;
                triangle_group.y = current_group.y;
                current_group.x = (uint)0;
                current_group.y = (uint)0;
            }

            while(triangle_group.y != 0) { 
                if(tlas_stack_size == -1) {//Transfer from Top Level Accelleration Structure to Bottom Level Accelleration Structure
                    uint mesh_offset = firstbithigh(triangle_group.y);
                    triangle_group.y &= ~(1 << mesh_offset);

                    mesh_id = triangle_group.x + mesh_offset;
                    NodeOffset = _MeshData[mesh_id].NodeOffset;
                    TriOffset = _MeshData[mesh_id].TriOffset;
                    if(triangle_group.y != 0) {
                        stack[stack_size++] = triangle_group;
                    }

                    if(current_group.y & 0xff000000) {
                        stack[stack_size++] = current_group;
                    }
                    tlas_stack_size = stack_size;

                    int root_index = (_MeshData[mesh_id].mesh_data_bvh_offsets & 0x7fffffff);

                    ray.direction = (mul(_MeshData[mesh_id].Transform, float4(ray.direction, 0))).xyz;
                    ray.origin = (mul(_MeshData[mesh_id].Transform, float4(ray.origin, 1))).xyz;
                    ray.direction_inv = rcp(ray.direction);
                   
                    oct_inv4 = ray_get_octant_inv4(ray.direction);

                    current_group.x = (uint)root_index;
                    current_group.y = (uint)0x80000000;

                    break;
                }
                else {
                    uint triangle_index =  firstbithigh(triangle_group.y);
                    triangle_group.y &= ~(1 << triangle_index);

                    IntersectTriangle(mesh_id, triangle_group.x + triangle_index, ray, bestHit);//Intersect Mesh Triangles
                }
            }

            if((current_group.y & 0xff000000) == 0) {
                if(stack_size == 0) {//thread has finished traversing
                    GlobalRays2[ray_index] = GlobalRays1[ray_index];
                    set2(ray_index, bestHit);
                    current_group.y = 0;
                    break;
                }

                if(stack_size == tlas_stack_size) {
                    tlas_stack_size = -1;
                    ray = ray2;
                    oct_inv4 = ray_get_octant_inv4(ray.direction);
                }
                current_group = stack[--stack_size];
            }
        }
    }
}


[numthreads(64,1,1)]
void kernel_trace () {//If I move the function contents into here, unity yells at me, so for now its just gonna continue to live in its function
    IntersectBVH();
}




#pragma kernel kernel_shadow

TrianglePos triangle_get_positions2(int ID) {
    TrianglePos tri;
    tri.pos0 = LightTriangles[ID].pos0;
    tri.posedge1 = LightTriangles[ID].posedge1;
    tri.posedge2 = LightTriangles[ID].posedge2;
    return tri;
}

inline bool triangle_intersect_shadow(int tri_id, const Ray ray, float max_distance) {
    TrianglePos tri = triangle_get_positions(tri_id);

    float3 h = cross(ray.direction, tri.posedge2);
        float  a = dot(tri.posedge1, h);

        float  f = rcp(a);
        float3 s = ray.origin - tri.pos0;
        float  u = f * dot(s, h);

    if (u >= 0.0f && u <= 1.0f) {
        float3 q = cross(s, tri.posedge1);
        float  v = f * dot(ray.direction, q);

        if (v >= 0.0f && u + v <= 1.0f) {
            float t = f * dot(tri.posedge2, q);

            if (t > 0.0f && t < max_distance) return true;
        }
    }

    return false;
}



void IntersectBVHShadow() {
    RayHit bestHit;
    Ray ray;

    uint2 stack[24];
    int stack_size = 0;
    uint ray_index;
    uint2 current_group;

    uint oct_inv4;
    int tlas_stack_size;
    int mesh_id;
    float max_distance;
    Ray ray2;

    while(true) {
        bool inactive = stack_size == 0 && current_group.y == 0;

        if (inactive) {//Revive dead threads(persistent threads, need Shader Model 6 to take true advantage of)
            InterlockedAdd(BufferSizes[CurBounce + 1].shadow_rays_retired, 1, ray_index);
            if(ray_index >= (uint)BufferSizes[CurBounce + 1].shadow_rays) return;
            ray.origin = ShadowRaysBuffer[ray_index].origin;
            ray.direction = ShadowRaysBuffer[ray_index].direction;
            ray.direction_inv = rcp(ray.direction);
            ray2 = ray;
           
            oct_inv4 = ray_get_octant_inv4(ray.direction);

            current_group.x = (uint)0;
            current_group.y = (uint)0x80000000;
            bestHit = CreateRayHit();

            max_distance = ShadowRaysBuffer[ray_index].t;

            tlas_stack_size = -1;
        }

        while(true) {//Traverse Accelleration Structure(Compressed Wide Bounding Volume Hierarchy)            
            uint2 triangle_group;
            if(current_group.y & 0xff000000) {
                uint hits_imask = current_group.y;
                uint child_index_offset = firstbithigh(hits_imask);
                uint child_index_base = current_group.x;

                current_group.y &= ~(1 << child_index_offset);

                if(current_group.y & 0xff000000) {
                    stack[stack_size++] = current_group;
                }
                uint slot_index = (child_index_offset - 24) ^ (oct_inv4 & 0xff);
                uint relative_index = countbits(hits_imask & ~(0xffffffff << slot_index));
                uint child_node_index = child_index_base + relative_index;

                float3 node_0 = cwbvh_nodes[child_node_index].node_0xyz;
                uint node_0w = cwbvh_nodes[child_node_index].node_0w;
                
                uint4 node_1 = cwbvh_nodes[child_node_index].node_1;
                uint4 node_2 = cwbvh_nodes[child_node_index].node_2;
                uint4 node_3 = cwbvh_nodes[child_node_index].node_3;
                uint4 node_4 = cwbvh_nodes[child_node_index].node_4;

                uint hitmask = cwbvh_node_intersect(ray, oct_inv4, max_distance, node_0, node_0w, node_1, node_2, node_3, node_4);

                uint imask = (node_0w >> (3 * 8)) & 0xff;

                current_group.x = asuint(node_1.x) + ((tlas_stack_size == -1) ? 0 : _MeshData[mesh_id].NodeOffset);
                triangle_group.x = asuint(node_1.y) + ((tlas_stack_size == -1) ? 0 : _MeshData[mesh_id].TriOffset);

                current_group .y = (hitmask & 0xff000000) | (uint)(imask);
                triangle_group.y = (hitmask & 0x00ffffff);
            }
            else {
                triangle_group.x = current_group.x;
                triangle_group.y = current_group.y;
                current_group.x = (uint)0;
                current_group.y = (uint)0;
            }

            bool hit = false;

            while(triangle_group.y != 0) { 
                if(tlas_stack_size == -1) {//Transfer from Top Level Accelleration Structure to Bottom Level Accelleration Structure
                    uint mesh_offset = firstbithigh(triangle_group.y);
                    triangle_group.y &= ~(1 << mesh_offset);

                    mesh_id = triangle_group.x + mesh_offset;

                    if(triangle_group.y != 0) {
                        stack[stack_size++] = triangle_group;
                    }

                    if(current_group.y & 0xff000000) {
                        stack[stack_size++] = current_group;
                    }
                    tlas_stack_size = stack_size;

                    int root_index = (_MeshData[mesh_id].mesh_data_bvh_offsets & 0x7fffffff);

                    ray.direction = (mul(_MeshData[mesh_id].Transform, float4(ray.direction, 0))).xyz;
                    ray.origin = (mul(_MeshData[mesh_id].Transform, float4(ray.origin, 1))).xyz;
                    ray.direction_inv = rcp(ray.direction);
                   
                    oct_inv4 = ray_get_octant_inv4(ray.direction);

                    current_group.x = (uint)root_index;
                    current_group.y = (uint)0x80000000;

                    break;
                }
                else {
                    uint triangle_index =  firstbithigh(triangle_group.y);
                    triangle_group.y &= ~(1 << triangle_index);

                    if(triangle_intersect_shadow(triangle_group.x + triangle_index, ray, max_distance)) {
                        hit = true;
                        break;
                    }
                }
            }

            if(hit) {
                stack_size = 0;
                current_group.y = 0;
                break;
            }

            if((current_group.y & 0xff000000) == 0) {
                if(stack_size == 0) {//thread has finished traversing
                    int pixel_index = ShadowRaysBuffer[ray_index].PixelIndex;
                    if(CurBounce == 0) {
                        GlobalColors[pixel_index].Direct += ShadowRaysBuffer[ray_index].illumination;
                    } else {
                        GlobalColors[pixel_index].Indirect += ShadowRaysBuffer[ray_index].illumination;
                    }
                    current_group.y = 0;
                    break;
                }

                if(stack_size == tlas_stack_size) {
                    tlas_stack_size = -1;
                    ray = ray2;
                    oct_inv4 = ray_get_octant_inv4(ray.direction);
                }
                current_group = stack[--stack_size];
            }
        }
    }
}


[numthreads(64,1,1)]
void kernel_shadow () {//If I move the function contents into here, unity yells at me, so for now its just gonna continue to live in its function
    IntersectBVHShadow();
}


#pragma kernel kernel_shade

int LightMeshCount;

struct LightMeshData {
    float4x4 Inverse;
    float3 Center;
    float energy;
    float TotalEnergy;
    int StartIndex;
    int IndexEnd;
};
StructuredBuffer<LightMeshData> _LightMeshes;

struct LightData {
    float3 Radiance;
    float3 Position;
    float3 Direction;
    float energy;
    float TotalEnergy;
    int Type;
    float2 SpotAngle;
};
StructuredBuffer<LightData> _UnityLights;


struct MaterialData {
    float3 BaseColor;
    float2 TexMax;
    float2 TexMin;
    float emmissive;
    float roughness;
    int HasTextures;
    int MatType;
    float3 eta;
};
StructuredBuffer<MaterialData> _Materials;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;

Texture2D<float4> _TextureAtlas;
SamplerState sampler_TextureAtlas;

//These are here purely for the Atrous
RWTexture2D<float4> TempPosTex;
RWTexture2D<float4> TempAlbedoTex;

struct HitMat {
    float3 surfaceColor;
    float emmis;
    float roughness;
    uint MatType;
    float3 eta;
};

HitMat CreateHitMat() {
    HitMat hit;
    hit.surfaceColor  = float3(0.0f, 0.0f, 0.0f);
    hit.emmis = 0.0f;
    hit.roughness = 0.0f;
    hit.MatType = 0;
    hit.eta = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

int SelectUnityLight() {
    const float2 rand_light = random(3);
    float e = max(min(rand_light.x, 1.0f) * _UnityLights[unitylightcount - 1].TotalEnergy, _UnityLights[0].energy);
    int low = 0;
    int high = unitylightcount - 1;
    while(low < high) {
        const int mid = (low + high) >> 1;
        LightData thislight = _UnityLights[mid];
        if(e < thislight.TotalEnergy)
            high = mid;
        else if(e > thislight.TotalEnergy + thislight.energy)
            low = mid + 1;
        else
            return mid;
    }
    // Failed to find a light using importance sampling, pick a random one from the array
    // NOTE: this is a failsafe, we should never get here!
    return clamp((rand_light.y * unitylightcount), 0, unitylightcount - 1);
}

int SelectLight(int MeshIndex) {
    const float2 rand_light = random(3);
    const int StartIndex = _LightMeshes[MeshIndex].StartIndex;
    const int IndexEnd = _LightMeshes[MeshIndex].IndexEnd;
    float e = max(min(rand_light.x, 0.99999f) * LightTriangles[IndexEnd - 1].sumEnergy, LightTriangles[StartIndex].energy);
    int low = StartIndex;
    int high = IndexEnd - 1;
    while(low < high) {
        const int mid = (low + high) >> 1;
        LightTriangleData tri = LightTriangles[mid];
        if(e < tri.sumEnergy)
            high = mid;
        else if(e > tri.sumEnergy + tri.energy)
            low = mid + 1;
        else
            return mid;
    }
    // Failed to find a light using importance sampling, pick a random one from the array
    // NOTE: this is a failsafe, we should never get here!
    return clamp((rand_light.y * (IndexEnd - StartIndex)), StartIndex, IndexEnd - 1);
}

int SelectLightMesh() {//Select mesh to sample light from
    const float2 rand_mesh = random(4);
    float e = max(min(rand_mesh.x, 1.0f) * _LightMeshes[LightMeshCount - 1].TotalEnergy, _LightMeshes[0].energy);
    int low = 0;
    int high = LightMeshCount - 1;
    while(low < high) {
        const int mid = (low + high) >> 1;
        LightMeshData mesh = _LightMeshes[mid];
        if(e < mesh.TotalEnergy)
            high = mid;
        else if(e > mesh.TotalEnergy + mesh.energy)
            low = mid + 1;
        else
            return mid;
    }
    // Failed to find a light using importance sampling, pick a random one from the array
    // NOTE: this is a failsafe, we should never get here!
    return clamp((rand_mesh.y * LightMeshCount), 0, LightMeshCount - 1);
}

float2 sample_disc(float u1, float u2) {
    float a = 2.0f * u1 - 1.0f;
    float b = 2.0f * u2 - 1.0f;
    if(a == 0.0f) a = 0.00001;
    if(b == 0.0f) b = 0.00001;

    float phi, r;
    if(a*a > b*b) {
        r = a;
        phi = (0.25f * PI) * (b/a);
    } else {
        r = b;
        phi = (0.25f * PI) * (a/b) + (0.5f * PI);
    }

    float sin_phi, cos_phi;
    sincos(phi, sin_phi, cos_phi);
    
    return float2(r * cos_phi, r * sin_phi);
}

float3 sample_cosine_weighted_direction(float u1, float u2) {
    float2 d = sample_disc(u1, u2);
    return float3(d.x, d.y, sqrt(abs(1.0f - dot(d, d))));
}

float3 sample(inout float pdf) {//Diffuse
    float2 rando = random(5);
    float3 omega_o = sample_cosine_weighted_direction(rando.x, rando.y);
    pdf = omega_o.z * ONE_OVER_PI;
    return omega_o;
}

float3x3 GetTangentSpace(float3 normal) {
    // Choose a helper vector for the cross product
    float3 helper = float3(1, 0, 0);
    if (abs(normal.x) > 0.99f)
        helper = float3(0, 0, 1);

    // Generate vectors
    float3 tangent = normalize(cross(normal, helper));
    float3 binormal = cross(normal, tangent);
    
    return float3x3(tangent, binormal, normal);
}

float3 sample_visible_normals_ggx(float3 omega, float alpha_x, float alpha_y, float u1, float u2) {
    float3 v = normalize(float3(alpha_x * omega.x, alpha_y * omega.y, omega.z));

    float length_squared = v.x*v.x + v.y*v.y;
    float3 axis_1 = (length_squared > 0.0f) ? float3(-v.y, v.x, 0.0f) / sqrt(length_squared) : float3(1.0f, 0.0f, 0.0f);
    float3 axis_2 = cross(v, axis_1);

    float2 d = sample_disc(u1, u2);
    float t1 = d.x;
    float t2 = d.y;

    float s = 0.5f * (1.0f + v.z);
    t2 = (1.0f - s) * sqrt(max(1.0f - t1 * t1, 0.0f)) + s*t2;

    float3 n_h = t1*axis_1 + t2*axis_2 + sqrt(max(0.0f, 1.0f - t1*t1 - t2*t2)) * v;

    return normalize(float3(alpha_x * n_h.x, alpha_y * n_h.y, n_h.z));
}

float3 fresnel_conductor(float cos_theta_i, const float3 eta, const float3 k) {
    float cos_theta_i2 = cos_theta_i * cos_theta_i;

    float3 t1 = eta*eta + k*k;
    float3 t0 = t1 * cos_theta_i;

    float3 p2 = (t0 - (eta * (2.0f * cos_theta_i)) + float3(1.0f, 1.0f, 1.0f)) / (t0 + (eta * (2.0f * cos_theta_i)) + float3(1.0f, 1.0f, 1.0f));
    float3 s2 = (t1 - (eta * (2.0f * cos_theta_i)) + float3(cos_theta_i2, cos_theta_i2, cos_theta_i2)) / (t1 + (eta * (2.0f * cos_theta_i)) + float3(cos_theta_i2, cos_theta_i2, cos_theta_i2));

    return 0.5f * (p2 + s2);
}

float ggx_D(const float3 micro_normal, float alpha_x, float alpha_y) {
    float sx = -micro_normal.x / (micro_normal.z * alpha_x);
    float sy = -micro_normal.y / (micro_normal.z * alpha_y);

    float s1 = 1.0f + sx * sx + sy * sy;

    float cos_theta_2 = micro_normal.z * micro_normal.z;
    float cos_theta_4 = cos_theta_2 * cos_theta_2;

    return 1.0f / (s1 * s1 * PI * alpha_x * alpha_y * cos_theta_4);
}

float ggx_lambda(const float3 omega, float alpha_x, float alpha_y) {
    return 0.5f * (sqrt(1.0f + ((alpha_x * omega.x) * (alpha_x * omega.x) + (alpha_y * omega.y) * (alpha_y * omega.y)) / (omega.z * omega.z)) - 1.0f);
}
float ggx_G1(const float3 omega, float alpha_x, float alpha_y) {
    return 1.0f / (1.0f + ggx_lambda(omega, alpha_x, alpha_y));
}

float ggx_G2(const float3 omega_o, const float3 omega_i, const float3 omega_m, float alpha_x, float alpha_y) {
    bool omega_i_backfacing = dot(omega_i, omega_m) * omega_i.z <= 0.0f;
    bool omega_o_backfacing = dot(omega_o, omega_m) * omega_o.z <= 0.0f;

    if(omega_i_backfacing || omega_o_backfacing) {
        return 0.0f;
    } else {
        return 1.0f / (1.0f + ggx_lambda(omega_o, alpha_x, alpha_y) + ggx_lambda(omega_i, alpha_x, alpha_y));
    }
}

bool sample_conductor(inout float3 throughput, HitMat material, float3 omega_i, inout float3 direction_out, inout float pdf) {//Metal
    float2 rand_brdf = random(5);
    float alpha_x = material.roughness;
    float alpha_y = material.roughness;
    float3 omega_m = sample_visible_normals_ggx(omega_i, alpha_x, alpha_y, rand_brdf.x, rand_brdf.y);

    float3 omega_o = reflect(-omega_i, omega_m);

    float o_dot_m = dot(omega_o, omega_m);
    if(o_dot_m <= 0.0f) return false;

    float3 F = fresnel_conductor(o_dot_m, material.eta, material.surfaceColor);

    float D = ggx_D(omega_m, alpha_x, alpha_y);
    float G1 = ggx_G1(omega_i, alpha_x, alpha_y);

    float G2 = ggx_G2(omega_o, omega_i, omega_m, alpha_x, alpha_y);
    
    [branch]if(UseNEE) {
    pdf = G1 * D / (4.0f * omega_i.z);
    }

    throughput *= F * G2 / G1;
    direction_out = omega_o;
    return true;
}


float fresnel_dielectric(float cos_theta_i, float eta) {
    float sin_theta_o2 = eta * eta * (1.0f - cos_theta_i*cos_theta_i);
    if(sin_theta_o2 >= 1.0f) {
        return 1.0f;
    }

    float cos_theta_o = sqrt(max(1.0f - sin_theta_o2, 0.0f));

    float s = (cos_theta_i - eta * cos_theta_o) / (eta * cos_theta_o + cos_theta_i);
    float p = (eta * cos_theta_i - cos_theta_o) / (eta * cos_theta_i + cos_theta_o);

    return 0.5f * (p*p + s*s);
}

bool sample_dielectric(inout float3 throughput, HitMat material, float3 omega_i, inout float3 direction_out, float eta, inout float pdf) {//Glass
    float rand_fresnel = random(2).y;
    float2 rand_brdf = random(5);

    float alpha_x = material.roughness;
    float alpha_y = material.roughness;

    float3 omega_m = sample_visible_normals_ggx(omega_i, alpha_x, alpha_y, rand_brdf.x, rand_brdf.y);

    float F = fresnel_dielectric(abs(dot(omega_i, omega_m)), eta);

    bool reflected = rand_fresnel < F;

    float3 omega_o;
    if(reflected) {
        omega_o = 2.0f * dot(omega_i, omega_m) * omega_m - omega_i;
    } else {
        float k = 1.0f - eta*eta * (1.0f - (dot(omega_i, omega_m) * dot(omega_i, omega_m)));
        omega_o = (eta * abs(dot(omega_i, omega_m)) - sqrt(max(k, 0.0f))) * omega_m - eta * omega_i;
    }

    direction_out = omega_o;

    if(reflected ^ (omega_o.z >= 0.0f)) return false;

    float D = ggx_D(omega_m, alpha_x, alpha_y);
    float G1 = ggx_G1(omega_i, alpha_x, alpha_y);
    float G2 = ggx_G2(omega_o, omega_i, omega_m, alpha_x, alpha_y);

    float i_dot_m = abs(dot(omega_i, omega_m));
    float o_dot_m = abs(dot(omega_o, omega_m));

    [branch]if(!UseNEE) {
        if(!reflected) {
            throughput *= eta*eta;
        }
    }else {
        if(reflected) {
            pdf = F * G1 * D / (4.0f * omega_i.z);
        } else {
            float temp = eta * i_dot_m + o_dot_m;
            pdf = (1.0f - F) * G1 * D * i_dot_m * o_dot_m / (omega_i.z * (temp * temp));
            throughput *= eta*eta;   
        }
    }
    
    throughput *= G2 / G1;

    direction_out = omega_o;

    return true;
}

inline void orthonormal_basis(const float3 normal, inout float3 tangent, inout float3 binormal) {
    float sign2 = (normal.z >= 0.0f) ? 1.0f : -1.0f;
    float a = -1.0f / (sign2 + normal.z);
    float b = normal.x * normal.y * a;

    tangent  = float3(1.0f + sign2 * normal.x * normal.x * a, sign2 * b, -sign2 * normal.x);
    binormal = float3(b, sign2 + normal.y * normal.y * a, -normal.y);
}

inline float3 local_to_world(const float3 vec, const float3 tangent, const float3 binormal, const float3 normal) {
    return float3(
        tangent.x * vec.x + binormal.x * vec.y + normal.x * vec.z,
        tangent.y * vec.x + binormal.y * vec.y + normal.y * vec.z,
        tangent.z * vec.x + binormal.z * vec.y + normal.z * vec.z
    );
}

float3 sample_henyey_greenstein(const float3 omega, float g, float u1, float u2) {
    float cos_theta;
    if (abs(g) < 1e-3f) {
        // Isotropic case
        cos_theta = 1.0f - 2.0f * u1;
    } else {
        float sqr_term = (1.0f - g * g) / (1.0f + g - 2.0f * g * u1);
        cos_theta = -(1.0f + g * g - sqr_term * sqr_term) / (2.0f * g);
    }
    float sin_theta = sqrt(max(1.0f - cos_theta * cos_theta, 0.0f));

    float phi = (PI * 2.0f) * u2;
    float sin_phi, cos_phi;
    sincos(phi, sin_phi, cos_phi);

    float3 direction = float3(
        sin_theta * cos_phi,
        sin_theta * sin_phi,
        cos_theta
    );

    float3 v1, v2;
    orthonormal_basis(omega, v1, v2);

    return local_to_world(direction, v1, v2, omega);
}

bool VolumetricScatter(inout float3 throughput, RayHit hit, inout Ray ray, inout float3 Pos, HitMat hitDat) {
    float3 SigmaS = hitDat.surfaceColor;
    float3 SigmaA = hitDat.eta;

    bool medium_can_scatter = (SigmaS.x + SigmaS.y + SigmaS.z) > 0.0f;

    if(medium_can_scatter) {
        float2 rand_scatter = random(3);
        float2 rand_phase = random(5);

        float3 sigma_t = SigmaA + SigmaS;

        float throughput_sum = throughput.x + throughput.y + throughput.z;
        float3 wavelength_pdf = throughput / throughput_sum;

        float sigma_t_used_for_sampling;
        if(rand_scatter.x * throughput_sum < throughput.x) {
            sigma_t_used_for_sampling = sigma_t.x;
        } else if(rand_scatter.x * throughput_sum < throughput.x + throughput.y) {
            sigma_t_used_for_sampling = sigma_t.y;
        } else {
            sigma_t_used_for_sampling = sigma_t.z;
        }

        float scatter_distance = -log(rand_scatter.y) / sigma_t_used_for_sampling;
        float dist = min(scatter_distance, hit.t);
        float3 transmittance = float3(
            exp(-sigma_t.x * dist),
            exp(-sigma_t.y * dist),
            exp(-sigma_t.z * dist)
            );

        if(scatter_distance < hit.t) {
            float3 pdf = wavelength_pdf * sigma_t * transmittance;
            throughput *= SigmaS * transmittance / (pdf.x + pdf.y + pdf.z);

            float3 direction_out = sample_henyey_greenstein(-ray.direction, hitDat.roughness, rand_phase.x, rand_phase.y);

            float3 ray_origin = ray.origin;
            ray.origin = ray_origin + scatter_distance * ray.direction;
            Pos = ray.origin;
            ray.direction = direction_out;
            return true;
        } else {
            float3 pdf = wavelength_pdf * transmittance;
            throughput *= transmittance / (pdf.x + pdf.y + pdf.z);
            return false;
        }
    }
    return false;
}

float3 SunDir;

Texture3D ScatterTex;
Texture3D MieTex;
SamplerState linearClampSampler;

static uint ScatteringTexRSize = 32;
static uint ScatteringTexMUSize = 128;
static uint ScatteringTexMUSSize = 32;
static uint ScatteringTexNUSize = 8;
static float bottom_radius = 6371.0f;
static float top_radius = 6403.0f;

float RayleighPhaseFunction(float nu) {
  float k = 3.0 / (16.0 * PI);
  return k * (1.0 + nu * nu);
}
float GetTextureCoordFromUnitRange(float x, int texture_size) {
    return 0.5f / (float)texture_size + x * (1.0f - 1.0f / (float)texture_size);
}

float MiePhaseFunction(float g, float nu) {
  float k = 3.0 / (8.0 * PI) * (1.0 - g * g) / (2.0 + g * g);
  return k * (1.0 + nu * nu) / pow(1.0 + g * g - 2.0 * g * nu, 1.5);
}

float GetUnitRangeFromTextureCoord(float u, int texture_size) {
    return (u - 0.5f / (float)texture_size) / (1.0f - 1.0f / (float)texture_size);
}

float DistanceToTopAtmosphereBoundary(float r, float mu) {
    float discriminant = r * r * (mu * mu - 1.0f) + top_radius * top_radius;
    return max(-r * mu + sqrt(max(discriminant, 0.0f)), 0.0f);
}

float4 GetScatteringTextureUvwzFromRMuMuSNu(float r, float mu, float mu_s, float nu, bool ray_r_mu_intersects_ground) {
    float H = sqrt(top_radius * top_radius - bottom_radius * bottom_radius);
    float rho = sqrt(max(r * r - bottom_radius * bottom_radius, 0.0f));
    float u_r = GetTextureCoordFromUnitRange(rho / H, ScatteringTexRSize);

    float r_mu = r * mu;
    float discriminant = r_mu * r_mu - r * r + bottom_radius * bottom_radius;
    float u_mu;
    if(ray_r_mu_intersects_ground) {
        float d = -r_mu - sqrt(max(discriminant, 0.0f));
        float d_min = r - bottom_radius;
        float d_max = rho;
        u_mu = 0.5f - 0.5f * GetTextureCoordFromUnitRange((d_max == d_min) ? 0.0f : (d - d_min) / (d_max - d_min), ScatteringTexMUSize / 2);
    } else {
        float d = -r_mu + sqrt(max(discriminant + H * H, 0.0f));
        float d_min = top_radius - r;
        float d_max = rho + H;
        u_mu = 0.5f + 0.5f * GetTextureCoordFromUnitRange((d - d_min) / (d_max - d_min), ScatteringTexMUSize / 2);
    }

    float d = DistanceToTopAtmosphereBoundary(bottom_radius, mu_s);
    float d_min = top_radius - bottom_radius;
    float d_max = H;
    float a = (d - d_min) / (d_max - d_min);
    float D = DistanceToTopAtmosphereBoundary(bottom_radius, -0.2f);
    float A = (D - d_min) / (d_max - d_min);

    float u_mu_s = GetTextureCoordFromUnitRange(max(1.0f - a / A, 0.0f) / (1.0f + a), ScatteringTexMUSSize);

    float u_nu = (nu + 1.0f) / 2.0f;
    return float4(u_nu, u_mu_s, u_mu, u_r);
}

float3 GetScattering(Texture3D Tex, float r, float mu, float mu_s, float nu, bool ray_r_mu_intersects_ground) {
  float4 uvwz = GetScatteringTextureUvwzFromRMuMuSNu(r, mu, mu_s, nu, ray_r_mu_intersects_ground);
  float tex_coord_x = uvwz.x * (float)(ScatteringTexNUSize - 1);
  float tex_x = floor(tex_coord_x);
  float lerp2 = tex_coord_x - tex_x;
  float3 uvw0 = float3((tex_x + uvwz.y) / (float)ScatteringTexNUSize,
      uvwz.z, uvwz.w);
  float3 uvw1 = float3((tex_x + 1.0 + uvwz.y) / (float)ScatteringTexNUSize,
      uvwz.z, uvwz.w);
  return float3(Tex.SampleLevel(linearClampSampler, uvw0, 0).xyz * (1.0 - lerp2) + Tex.SampleLevel(linearClampSampler, uvw1, 0).xyz * lerp2);
}

float3 GetScattering(float r, float mu, float mu_s, float nu, bool ray_r_mu_intersects_ground) {
    float3 rayleigh = GetScattering(ScatterTex, r, mu, mu_s, nu, ray_r_mu_intersects_ground);
    float3 mie = GetScattering(MieTex, r, mu, mu_s, nu, ray_r_mu_intersects_ground);
    return rayleigh * RayleighPhaseFunction(nu) + mie * MiePhaseFunction(-0.2f, nu);
}

float3 CalculateSkyBox(float3 rayOrig, float3 rayDir, RayHit hit) {
    rayOrig /= 1000.0f;
    rayOrig.y += bottom_radius;
    float muStartPos = dot(rayOrig, rayDir) / rayOrig.y;
    float nuStartPos = dot(rayDir, normalize(SunDir));
    float musStartPos = dot(rayOrig, normalize(SunDir)) / rayOrig.y;
    return GetScattering(rayOrig.y, muStartPos, musStartPos, nuStartPos, false);
}

float2 sample_triangle(float u1, float u2) {
    if (u2 > u1) {
        u1 *= 0.5f;
        u2 -= u1;
    } else {
        u2 *= 0.5f;
        u1 -= u2;
    }
    return float2(u1, u2);
}

bool evaldiffuse(const float3 to_light, float cos_theta_o, inout float3 bsdf, inout float pdf) {
    if (cos_theta_o <= 0.0f) return false;

    bsdf = float3(cos_theta_o * ONE_OVER_PI, cos_theta_o * ONE_OVER_PI, cos_theta_o * ONE_OVER_PI);
    pdf  = cos_theta_o * ONE_OVER_PI;

    return (pdf > 0 || pdf < 0 || pdf == 0);
}

bool evalconductor(HitMat material, const float3 to_light, float cos_theta_o, inout float3 bsdf, inout float pdf, float3 omega_i) {
    if (cos_theta_o <= 0.0f) return false;

    float3 omega_o = to_light;
    float3 omega_m = normalize(omega_o + omega_i);

    float o_dot_m = dot(omega_o, omega_m);
    if (o_dot_m <= 0.0f) return false;

    float alpha_x = material.roughness;
    float alpha_y = material.roughness;

    float3 F  = fresnel_conductor(o_dot_m, material.eta, material.surfaceColor);
    float  D  = ggx_D (omega_m, alpha_x, alpha_y);
    float  G1 = ggx_G1(omega_i, alpha_x, alpha_y);
    float  G2 = ggx_G2(omega_o, omega_i, omega_m, alpha_x, alpha_y);

    pdf  =     G1 * D / (4.0f * omega_i.z);
    bsdf = F * G2 * D / (4.0f * omega_i.z); // BRDF * cos(theta_o)

    return (pdf > 0 || pdf < 0 || pdf == 0);
}

bool evaldielectric(HitMat material, const float3 to_light, float cos_theta_o, inout float3 bsdf, inout float pdf, float3 omega_i) {
    float3 omega_o = to_light;

    bool reflected = omega_o.z >= 0.0f; // Same sign means reflection, alternate signs means transmission

    float3 omega_m;
    if (reflected) {
        omega_m = normalize(omega_i + omega_o);
    } else {
        omega_m = normalize(material.eta.x * omega_i + omega_o);
    }
    omega_m *= sign(omega_m.z);

    float i_dot_m = abs(dot(omega_i, omega_m));
    float o_dot_m = abs(dot(omega_o, omega_m));

    float alpha_x = material.roughness;
    float alpha_y = material.roughness;

    float F  = fresnel_dielectric(i_dot_m, material.eta.x);
    float D  = ggx_D (omega_m, alpha_x, alpha_y);
    float G1 = ggx_G1(omega_i, alpha_x, alpha_y);
    float G2 = ggx_G2(omega_o, omega_i, omega_m, alpha_x, alpha_y);

    if (reflected) {
        pdf = F * G1 * D / (4.0f * omega_i.z);
        float base = F * G2 * D / (4.0f * omega_i.z);
        bsdf = float3(base, base, base); // BRDF times cos(theta_o)
    } else {
        if (F >= 0.999f) return false; // TIR, no transmission possible

        pdf = (1.0f - F) * G1 * D * i_dot_m * o_dot_m / (omega_i.z * (material.eta.x * i_dot_m + o_dot_m) * (material.eta.x * i_dot_m + o_dot_m));
        float base2 = (1.0f - F) * G2 * D * i_dot_m * o_dot_m / (omega_i.z * (material.eta.x * i_dot_m + o_dot_m) * (material.eta.x * i_dot_m + o_dot_m));
        bsdf = material.eta.x * material.eta.x * float3(base2, base2, base2); // BRDF times cos(theta_o)
    }

    return (pdf > 0 || pdf < 0 || pdf == 0);
}

inline float power_heuristic(float pdf_f, float pdf_g) {
    return (pdf_f * pdf_f) / (pdf_f * pdf_f + pdf_g * pdf_g); // Power of 2 hardcoded, best empirical results according to Veach
}





void calcFinalColor(inout Ray ray, inout ColData Color, const HitMat hitDat, const RayHit hit, uint2 Uv, inout bool terminated) {//main function

    if(CurBounce == MaxBounce)//We have reached the maximum allowed bounce count
        return;
    float3 prevpos = ray.origin;
    float3 pos = ray.direction * hit.t + ray.origin;
    float newt = hit.t;

    uint index = hit.triangle_id;
    float3 norm = normalize(mul(_MeshData[hit.mesh_id].Inverse, float4(AggTris[index].norm0 + hit.u * AggTris[index].normedge1 + hit.v * AggTris[index].normedge2, 0.0f)).xyz);
    if(CurBounce == 0) {//Setting textures for denosier to use
        TempPosTex[Uv] = float4(pos, 1.0f);
        if(hitDat.MatType != 2) {
            TempAlbedoTex[Uv] = float4(hitDat.surfaceColor, 1.0f);
        } else {
            TempAlbedoTex[Uv] = float4(1.0f, 1.0f, 1.0f, 1.0f);
        }
    }

    if(hitDat.emmis > 0.0f) {//if we hit a light, this ray is done
        Color.throughput *= hitDat.surfaceColor;
        //Color.Color += Color.throughput * (hitDat.emmis);
        if(CurBounce == 0) {
            Color.Direct = hitDat.emmis;
        } else if(CurBounce == 1) {
            Color.Direct += hitDat.surfaceColor * (hitDat.emmis);
        } else {
            Color.Indirect += Color.throughput * (hitDat.emmis);
        }
        return;
    }
    float3 throughput = Color.throughput;

    float3 tempraydir = float3(0.0f, 0.0f, 0.0f);
    bool valid = true;
    float pdf = 0.0f;
    float3 omega_i = mul(GetTangentSpace(norm), -ray.direction);

    [branch]switch(hitDat.MatType) {//Switch between different materials
        case 1://Conductor material(metal)
            if(dot(ray.direction, norm) >= 0.0f) {
                norm = -norm;
            }
            omega_i = mul(GetTangentSpace(norm), -ray.direction);
            valid = sample_conductor(throughput, hitDat, omega_i, tempraydir, pdf);
            ray.direction = normalize(mul(tempraydir, GetTangentSpace(norm)));    
        break;
        case 2://Dielectric material(glass)
            float eta = hitDat.eta.x;
            if(dot(ray.direction, norm) < 0.0f) {
             eta = rcp(eta);
                norm = -norm;
            } else {
                throughput *= exp(-hitDat.surfaceColor * hit.t * 12.0f);//Beers law
            }
            valid = sample_dielectric(throughput, hitDat, mul(GetTangentSpace(-norm), -ray.direction), tempraydir, eta, pdf);
            ray.direction = normalize(mul(tempraydir, GetTangentSpace(-norm)));
        break;
        case 3://"Glossy" material
            ray.direction = normalize(mul(sample(pdf), GetTangentSpace(norm)) * hitDat.roughness + reflect(ray.direction, norm));
            throughput *= hitDat.surfaceColor;
        break;
     /*   case 4://mask material
                norm = -norm;
        break;*/
        case 5://"Volumetric" material
            if(dot(ray.direction, norm) >= 0.0f) {
                if(VolumetricScatter(throughput, hit, ray, pos, hitDat)) {
                    norm = -norm;
                }
            } else {
                ray.direction = ray.direction;
                norm = -norm;
            }
        break;
        case 6://DiffTrans
        if(dot(ray.direction, norm) < 0.0f) {
            if(random(9).x < 0.5f) {
                norm = -norm;
            }
                } else {
                    throughput *= exp(-hitDat.surfaceColor * hit.t);//Beers law
                }
                ray.direction = normalize(normalize(mul(sample(pdf), GetTangentSpace(norm))) * (1.0f - hitDat.roughness) + hitDat.roughness * ray.direction);
            throughput *= hitDat.surfaceColor;

        break;
        case 7:
            ray.direction = normalize(mul(sample(pdf), GetTangentSpace(norm)));
            throughput *= hitDat.surfaceColor;
        break;
        default:
            ray.direction = normalize(mul(sample(pdf), GetTangentSpace(norm)));
            throughput *= hitDat.surfaceColor;
        break;
    }
    if(!valid) return;//If the ray failed, we have no choice but to terminate this path
    ray.origin = norm * 0.001f + pos;//Offset the ray origin so we dont self intersect with the triangle we just bounced off of

    if(UseRussianRoulette) {
        float3 AdjustedCol = throughput * TempAlbedoTex[Uv].xyz;
        float p = saturate(max(AdjustedCol.x, max(AdjustedCol.y, AdjustedCol.z)));
       if(random(2).x > p && CurBounce > 0)//Simple Russian Roulette
         return;
       if(CurBounce > 0)
           throughput *= rcp(p);//rcp is a slightly faster but less accurate version of 1 / p, I decided the inaccuracy was worth the performance bump
    }
    Color.throughput = throughput;
    if(UseNEE) {//Next event estimation
        bool UseUnityLight = (unitylightcount != 0) ? (LightMeshCount != 0) ? (random(9).x <= 1.0f - (_LightMeshes[LightMeshCount - 1].TotalEnergy / _UnityLights[unitylightcount - 1].TotalEnergy)) : true : false;//Choose whether to sample unity lights or mesh lights
        float3 pos2;
        float3 LightNorm;
        int triindex;
        bool IsAboveHorizon = true;
        bool IsDirectional = false;
        float MeshChance = 0.0f;
        if(UseUnityLight) {
            triindex = SelectUnityLight();
            LightData Light = _UnityLights[triindex];
            [branch]switch(Light.Type) {
                default:
                    pos2 = Light.Position;
                    LightNorm = normalize(ray.origin - pos2);
                break;
                case 1:
                    pos2 = ray.origin - Light.Direction;
                    LightNorm = Light.Direction;
                    IsAboveHorizon = (LightNorm.y <= 0.0f);
                    IsDirectional = true;
                break;
                case 2:
                    pos2 = Light.Position;
                    LightNorm = Light.Direction;
                    IsAboveHorizon = false;
                break;
            }
        } else {
            int MeshIndex = SelectLightMesh();
            triindex = SelectLight(MeshIndex);
            TrianglePos CurTri = triangle_get_positions2(triindex);
            float2 rand_triangle = random(4);
            float2 CurUv = sample_triangle(rand_triangle.x, rand_triangle.y);
            pos2 = mul(_LightMeshes[MeshIndex].Inverse, float4(CurTri.pos0 + CurUv.x * CurTri.posedge1 + CurUv.y * CurTri.posedge2, 0.0f)).xyz + _LightMeshes[MeshIndex].Center;
            LightNorm = normalize(mul(_LightMeshes[MeshIndex].Inverse, float4(LightTriangles[triindex].Norm, 0.0f)).xyz);
            MeshChance = _LightMeshes[MeshIndex].energy / _LightMeshes[LightMeshCount - 1].TotalEnergy;
        }
        float3 to_light = pos2 - ray.origin;

        float distance_to_light_squared = dot(to_light, to_light);
        float distance_to_light = sqrt(max(distance_to_light_squared, 0.0f));

        to_light = to_light / distance_to_light;
        float Attenuation = 1.0f;
        if(!IsDirectional && !IsAboveHorizon) {
            float theta = dot(to_light, -LightNorm);
            if(theta > _UnityLights[triindex].SpotAngle.x) {
                IsAboveHorizon = true;
                float epsilon = _UnityLights[triindex].SpotAngle.x - _UnityLights[triindex].SpotAngle.y;
                Attenuation = clamp((theta - _UnityLights[triindex].SpotAngle.x) / epsilon, 0.0f, 1.0f);
            }
        }
        
        bool validbsdf = false;
        float3 bsdf_value = 0.0f;
        float bsdf_pdf = 0.0f;

        float cos_theta_light = abs(dot(to_light, LightNorm));
        float cos_theta_hit = dot(to_light, norm);
        [branch]switch(hitDat.MatType) {//Switch between different materials
            case 1:
                validbsdf = evalconductor(hitDat, mul(GetTangentSpace(LightNorm), -to_light), cos_theta_hit, bsdf_value, bsdf_pdf, omega_i);
            break;
            default:
                validbsdf = evaldiffuse(to_light, cos_theta_hit, bsdf_value, bsdf_pdf);
            break;
            case 2:
                validbsdf = evaldielectric(hitDat, mul(GetTangentSpace(LightNorm), -to_light), cos_theta_hit, bsdf_value, bsdf_pdf, omega_i);
            break;
            /*case 4:
                validbsdf = false;
            break;*/
            case 5:
                validbsdf = true;
            break;
            case 6:
                validbsdf = evaldiffuse(to_light, cos_theta_hit, bsdf_value, bsdf_pdf);
            break;
            case 7:
                validbsdf = evaldiffuse(to_light, cos_theta_hit, bsdf_value, bsdf_pdf);
            break;
        }

        if(validbsdf && IsAboveHorizon) {
            float G = max(0.0, dot(norm, to_light)) * max(0.0, -dot(to_light, LightNorm)) / distance_to_light_squared;
            if(G > 0.0f) {
                float light_pdf = 1.0f;
                float3 Radiance;
                if(UseUnityLight) {
                    light_pdf = rcp(G);
                    light_pdf *= _UnityLights[triindex].energy / _UnityLights[unitylightcount - 1].TotalEnergy;
                    Radiance = _UnityLights[triindex].Radiance;
                } else {
                    light_pdf = rcp(LightTriangles[triindex].area * G);
                    light_pdf *= LightTriangles[triindex].energy / LightTriangles[lighttricount - 1].sumEnergy * MeshChance;
                    Radiance = LightTriangles[triindex].radiance;
                }
                float w = power_heuristic(light_pdf, bsdf_pdf);

                uint index3;//Congrats, the ray will continue its path
                InterlockedAdd(BufferSizes[CurBounce + 1].shadow_rays, 1, index3);

                ShadowRaysBuffer[index3].origin = ray.origin;
                ShadowRaysBuffer[index3].direction = to_light;
                ShadowRaysBuffer[index3].t = (IsDirectional) ? 10000.0f : distance_to_light - 2.0f * EPSILON;
                ShadowRaysBuffer[index3].illumination = throughput * ((Radiance * w * bsdf_value) / light_pdf) * Attenuation;    
                ShadowRaysBuffer[index3].PixelIndex = Uv.x + Uv.y * screen_width;
            }
        }
    }
    uint index2;//Congrats, the ray will continue its path
    InterlockedAdd(BufferSizes[CurBounce + 1].tracerays, 1, index2);
    GlobalRays1[index2].origin = ray.origin;
    GlobalRays1[index2].direction = ray.direction;
    GlobalRays1[index2].PixelIndex = Uv.x + Uv.y * screen_width;
    
    set(index2, hit);
    terminated = false;//identifier so we dont write to output before the ray ends
}

[numthreads(8,8,1)]
void kernel_shade () {

    uint index;
    InterlockedAdd(BufferSizes[CurBounce].shade_rays, 1, index);
    if(BufferSizes[CurBounce].shade_rays >= BufferSizes[CurBounce].tracerays) return;
    int PixIndex = GlobalRays2[index].PixelIndex;
    uint2 TempUv = uint2(PixIndex % screen_width, PixIndex / screen_width);
    pixel_index = PixIndex;//TempUv is the origional screen coordinates of the ray

    Ray ray;
    RayHit bestHit = get2(index);
    ray.origin = GlobalRays2[index].origin;
    ray.direction = GlobalRays2[index].direction;
    ray.direction_inv = float3(0.0f, 0.0f, 0.0f);//We dont need to calculate this, but we do need to give it some value or Unity complains

    ColData Color = GlobalColors[pixel_index];
    if(bestHit.t > 1000000.0) {//if ray goes into the void, sample skybox
        float3 SkyColAcc;
        #ifdef UseSkyBox
            float theta = acos(ray.direction.y) / -PI;
            float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
            float3 sky = _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz;
            if(CurBounce == 0) {//Seperated into direct and indirect channels
                Color.Direct = sky;
            } else if(CurBounce == 1) {
                Color.Direct += sky;
            } else {
                Color.Indirect += Color.throughput * sky;
            }
            SkyColAcc = Color.throughput * sky;
        #else
            float3 SkyBoxCol = CalculateSkyBox(ray.origin, ray.direction, bestHit);
            if(CurBounce == 0) {//Seperated into direct and indirect channels
                Color.Direct = ((SkyBoxCol * 12.0f) + pow(max(dot(-SunDir, -ray.direction), 0.0f), 140.0f));
            } else if(CurBounce == 1) {
                Color.Direct += ((SkyBoxCol * 12.0f) + pow(max(dot(-SunDir, -ray.direction), 0.0f), 140.0f));
            } else {
                Color.Indirect += Color.throughput * ((SkyBoxCol * 12.0f) + pow(max(dot(-SunDir, -ray.direction), 0.0f), 140.0f));
            }
            SkyColAcc = Color.throughput * ((SkyBoxCol * 12.0f) + pow(max(dot(-SunDir, -ray.direction), 0.0f), 140.0f)) ;
        #endif
        GlobalColors[pixel_index] = Color;
        if(CurBounce == 0) {
            TempAlbedoTex[TempUv] = float4(SkyColAcc, 1.0f);
            TempPosTex[TempUv] = float4(0.0f, 0.0f, 0.0f, 0.0f);
        }
        return;
    }

    int MaterialIndex = _MeshData[bestHit.mesh_id].MaterialOffset + AggTris[bestHit.triangle_id].MatDat;

    float2 Uv = AggTris[bestHit.triangle_id].tex0 * (1.0f - bestHit.u - bestHit.v) + AggTris[bestHit.triangle_id].texedge1 * bestHit.u + AggTris[bestHit.triangle_id].texedge2 * bestHit.v;
    Uv = fmod(Uv + 100.0f, float2(1.0f, 1.0f)) * (_Materials[MaterialIndex].TexMax - _Materials[MaterialIndex].TexMin) + _Materials[MaterialIndex].TexMin;

    HitMat hitmat = CreateHitMat();//Transfer Material properties
    MaterialData TempMat = _Materials[MaterialIndex];
    float4 BaseCol = (TempMat.HasTextures != 0) ? _TextureAtlas.SampleLevel(sampler_TextureAtlas, Uv, 0) : float4(TempMat.BaseColor, 1.0f);
    hitmat.surfaceColor = BaseCol.xyz;
    hitmat.emmis = TempMat.emmissive;
    hitmat.roughness = TempMat.roughness;
    hitmat.MatType = TempMat.MatType;
    hitmat.eta = TempMat.eta;
    bool DidTerminate = true;//Identifier marking whether we have terminated the ray or if it will continue
    calcFinalColor(ray, Color, hitmat, bestHit, TempUv, DidTerminate);

    GlobalColors[pixel_index] = Color;
}



#pragma kernel kernel_finalize

[numthreads(16,16,1)]
void kernel_finalize (uint3 id : SV_DispatchThreadID) {//Moved final accumulation into its own kernel, improves performance
    
    if(id.x >= screen_width || id.y >= screen_height) return;
    int final_pixel_index = id.y * screen_width + id.x;

    Result[id.xy] = float4((GlobalColors[final_pixel_index].Direct + GlobalColors[final_pixel_index].Indirect) * TempAlbedoTex[id.xy].xyz, 1.0f);
}