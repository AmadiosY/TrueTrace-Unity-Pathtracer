#pragma kernel Bloom
int screen_width;
int screen_height;
Texture2D<float4> InputTex;
SamplerState samplerInputTex;
Texture2D<float4> OrigTex;
SamplerState samplerOrigTex;
RWTexture2D<float4> OutputTex;


float2 invRes;
float2 UV;

inline bool2 greaterThanEqual(float2 A, float2 B) {
    return A > B;
}

static const float Weights[] = {
    0.0625f,0.0438611699158f,0.00972436226801f,0.00367965644036f,
    0.25f,0.19446601125,0.0857864376269f,0.00972436226801f,
    0.5625f,0.417893218813f,0.19446601125,0.0438611699158,
    1.0f,0.5625f,0.25f, 0.0625f
};

inline float3 calculateBloomTile(const float lod, const float2 offset) {
    const float2 scale = invRes * exp2(lod);
    
    if (any(greaterThanEqual(abs(UV - 0.5), scale + 0.5)))
        return float3(0,0,0);
    
    float3  bloom = float3(0,0,0);
    float totalWeight = 0.0;
    
    for (int y = -2; y <= 2; y++) {
        for (int x = -2; x <= 2; x++) {
            float weight  = clamp(1.0 - length(float2(x, y)) / 4.0, 0.0, 1.0);
                  weight *= weight;
            bloom += InputTex.SampleLevel(samplerInputTex, UV + float2(x, y) * scale, lod).rgb * weight;
            totalWeight += weight;
        }
    }
    
    return bloom / totalWeight;
}

float3 calculateBloom() {
    float3 bloom = float3(0,0,0);
    bloom += calculateBloomTile(2.0, float2(0.0                     ,                    0.0));
    bloom += calculateBloomTile(3.0, float2(0.0                     , 0.25   + invRes.y * 2.0));
    bloom += calculateBloomTile(4.0, float2(0.125    + invRes.x * 2.0, 0.25   + invRes.y * 2.0));
    bloom += calculateBloomTile(5.0, float2(0.1875   + invRes.x * 4.0, 0.25   + invRes.y * 2.0));
    bloom += calculateBloomTile(6.0, float2(0.125    + invRes.x * 2.0, 0.3125 + invRes.y * 4.0));
    bloom += calculateBloomTile(7.0, float2(0.140625 + invRes.x * 4.0, 0.3125 + invRes.y * 4.0));

    return bloom;
}




[numthreads(16,16,1)]
void Bloom (uint3 id : SV_DispatchThreadID)
{
    if(id.x > (uint)screen_width || id.y > (uint)screen_height) return;
    invRes = 1.0f / float2(screen_width, screen_height);
    UV = ((float2)id.xy + 0.5f) * invRes;


     float4 rgba =  OrigTex.SampleLevel(samplerOrigTex, UV, 0);
     rgba += float4(clamp(calculateBloom(), 0.0, 65535.0) * rcp(32.0f),0);


    OutputTex[id.xy] = float4(rgba.xyz / 2.0f, 1);

}



