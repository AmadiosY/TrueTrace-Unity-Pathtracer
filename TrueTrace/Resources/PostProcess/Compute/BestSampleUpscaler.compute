int source_width;
int source_height;
int target_width;
int target_height;

Texture2D<half> FullResDepth;
SamplerState my_linear_clamp_sampler;


float most_representative(float2 in_uv)
{
   float samples[] = {
      FullResDepth.SampleLevel(my_linear_clamp_sampler, in_uv, 0).x,
      FullResDepth.SampleLevel(my_linear_clamp_sampler, in_uv + float2(0,1) / float2(target_width, target_height), 0).x,
      FullResDepth.SampleLevel(my_linear_clamp_sampler, in_uv + float2(1,0) / float2(target_width, target_height), 0).x,
      FullResDepth.SampleLevel(my_linear_clamp_sampler, in_uv + float2(1,1) / float2(target_width, target_height), 0).x};
 
   float centr = (samples[0] + samples[1] + samples[2] + samples[3]) / 4.0;
   float dist[] = {
         abs(centr - samples[0]),
         abs(centr - samples[1]),
         abs(centr - samples[2]),
         abs(centr - samples[3])};
   
   float max_dist = max(max(dist[0], dist[1]), max(dist[2], dist[3]));
   float rem_samples[3];
   int rejected_idx[3];
 
   int j = 0; int i; int k = 0;
   for (i = 0; i < 4; i++) {
      if (dist[i] < max_dist) {
         rem_samples[j] = samples[i];
         j++;
      } else {
         /* for the edge case where 2 or more samples
            have max_dist distance from the centroid */
         rejected_idx[k] = i;
         k++;
      }
   }
 
   /* also for the edge case where 2 or more samples
      have max_dist distance from the centroid */
   if (j < 2) {
      for (i = 3; i > j; i--) {
         rem_samples[i] = samples[rejected_idx[k]];
         k--;
      }
   }
 
   centr = (rem_samples[0] + rem_samples[1] + rem_samples[2]) / 3.0;
 
   dist[0] = abs(rem_samples[0] - centr);
   dist[1] = abs(rem_samples[1] - centr);
   dist[2] = abs(rem_samples[2] - centr);
 
   float min_dist = min(dist[0], min(dist[1], dist[2]));
   for (int i = 0; i < 3; i++) {
      if (dist[i] == min_dist)
         return rem_samples[i];
   }
 
   /* should never reach */
   return samples[0];
}



#pragma kernel Downsample

[numthreads(8,8,1)]
void Downsample (uint3 id : SV_DispatchThreadID)
{

}
